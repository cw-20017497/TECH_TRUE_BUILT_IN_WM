cscope 15 D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source"               0000053710
	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\comm.c

1 
	~"comm.h
"

7 
CommHódî_T
 
	gcomm_hódî
[ 
MAX_COMM_ID
 ];

10 
CommHódî_T
 
	$GëCommHódî
–
U8
 
id
 )

13  
comm_hódî
[ 
id
 ];

14 
	}
}

16 
	$SëCommHódî
–
U8
 
id
, 
CommHódî_T
 
vÆ
 )

19 
comm_hódî
[ 
id
 ] = 
vÆ
;

20 
	}
}

27 
I16
 
	$CommSídPackë
–
U8
 
id
, U8 *
£nd_pkt
 , 
I16
 
Àn
 )

29 
U8
 
i
;

32 if–
	`HAL_IsFuŒSídBuf„r
–
id
 ) !
TRUE
 )

34  
i
 = 0 ; i < 
Àn
 ; i++ )

36 
	`HAL_SëSídBuf„r
–
id
, 
£nd_pkt
[ 
i
 ] );

39 
	`HAL_SídByã
–
id
 );

40  
Àn
;

44 
	}
}

50 
I8
 
	$CommRecvPackë
–
U8
 
id
 , U8 *
ªcv_pkt
 )

52 
U16
 
i
;

53 
I16
 
Àn
;

55 if–
	`HAL_IsEm±yRecvBuf„r
–
id
 ) !
TRUE
 )

57 
Àn
 = 
	`HAL_GëRecvLígth
–
id
 );

58  
i
 = 0; i < 
Àn
 ; i++ )

60 
ªcv_pkt
[ 
i
 ] = 
	`HAL_GëRecvBuf„r
–
id
, i );

63  
Àn
;

68 
	}
}

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\comm.h

1 #i‚de‡
__COMM_H__


2 
	#__COMM_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"hÆ_£rül.h
"

7 
U16
 
	tCommHódî_T
;

9 
CommHódî_T
 
GëCommHódî
–
U8
 
id
 );

10 
SëCommHódî
–
U8
 
id
, 
CommHódî_T
 
vÆ
 );

12 
I16
 
CommSídPackë
–
U8
 
id
, U8 *
£nd_pkt
, I16 
Àn
 );

13 
I8
 
CommRecvPackë
–
U8
 
id
 , U8 *
ªcv_pkt
 );

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\comm_queue.c

1 
	~"comm_queue.h
"

2 
	~"queue.h
"

3 
	~"timî.h
"

4 
	~"timî_id.h
"

6 
	~"∑r£r_maö.h
"

8 
	#MAX_QUEUE_NUM
 30

	)

9 
CommD©a_T
 
	gcomm_‰⁄t
[ 
MAX_QUEUE_NUM
 ];

10 
SQueue_T
 
	gcomm_queue
[ 
MAX_COMM_ID
 ];

13 
	#RETRY_REQ_COUNT
 3

	)

14 
	#RETRY_ACK_COUNT
 1

	)

15 
	#RETRY_WAIT_TIME
 50

	)

16 
CommD©a_T
 
	gcomm_maö
;

18 
	$InôCommQueue
()

20 
	`InôQueue
–&
comm_queue
[ 
COMM_ID_MAIN
 ], &
comm_‰⁄t
, –
CommD©a_T
 ), 
MAX_QUEUE_NUM
 );

21 
	}
}

24 
	$SëCommQueueFr⁄t
(
U8
 
∑ckë
)

26 
CommD©a_T
 
d©a
;

28 
d©a
.
∑ckë
 =Öacket;

30 if–
∑ckë
 =
PKT_REQ_KEY
 )

32 
d©a
.
ªåy_cou¡
 = 
RETRY_REQ_COUNT
;

36 
d©a
.
ªåy_cou¡
 = 
RETRY_ACK_COUNT
;

39 
	`EnQueue
–&
comm_queue
[ 
COMM_ID_MAIN
 ], &
d©a
);

40 
	}
}

44 
	$SídPackëQueueFr⁄t
()

46 if–
	`IsExpúedTimî
–
TIMER_ID_COMM_WAIT_1
 ) !
TIMER_EXPIRE
 )

51 if–
comm_maö
.
ªåy_cou¡
 == 0 )

53 if–
	`DeQueue
–&
comm_queue
[ 
COMM_ID_MAIN
 ], (*)&
comm_maö
 ) =
TRUE
 )

56 
comm_maö
.
ªåy_cou¡
--;

58 
	`SëCommHódî
–
COMM_ID_MAIN
, 
comm_maö
.
∑ckë
);

59 
	`SèπTimî
–
TIMER_ID_COMM_MAIN_TX
, 0 );

64 
comm_maö
.
ªåy_cou¡
--;

66 
	`SëCommHódî
–
COMM_ID_MAIN
, 
comm_maö
.
∑ckë
);

67 
	`SèπTimî
–
TIMER_ID_COMM_MAIN_TX
, 0 );

70 
	`SèπTimî
–
TIMER_ID_COMM_WAIT_1
, 
RETRY_WAIT_TIME
 );

71 
	}
}

74 
	$Re˚ivedFr⁄tAck
(
U8
 
∑ckë
)

76 if–
∑ckë
 =
comm_maö
.packet )

78 
comm_maö
.
ªåy_cou¡
 = 0;

80 
	}
}

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\comm_queue.h

1 #i‚de‡
__COMM_QUEUE_H__


2 
	#__COMM_QUEUE_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"hÆ_£rül.h
"

8 
	s_comm_d©a_


10 
U16
 
	m∑ckë
;

11 
U8
 
	mªåy_cou¡
;

12 } 
	tCommD©a_T
;

14 
InôCommQueue
();

18 
SëCommQueueFr⁄t
(
U8
 
∑ckë
);

20 
SídPackëQueueFr⁄t
( );

22 
Re˚ivedFr⁄tAck
(
U8
 
∑ckë
);

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\crc16.c

1 
	~"¸c16.h
"

5 
	#MASK
 0xA001

	)

6 
	$CÆCrc16
(
Crc
,
C
)

8 
j
;

9 
CrcSum
;

10 
CrcBuf
;

13 
CrcSum
 = 
Crc
;

14 
CrcBuf
 = 
C
;

16 
j
=0;j < 8;j++) {

17 if(((
CrcSum
 ^ 
CrcBuf
Ë& 0x0001Ë!0ËCrcSum = (CrcSum >> 1Ë^ 
MASK
;

18 
CrcSum
 >>= 1;

20 
CrcBuf
 >>= 1;

23  
CrcSum
;

24 
	}
}

29 c⁄° 
U16
 
	g¸c16èb
[256] =

71 
U16
 
	$¸c16_ˇl
(
U8
 *
uc_d©a
, U8 
uc_numbî
)

73 
U16
 
ui_¸c
 = 0;

74 
U16
 
ui_ãmp_¸c
;

76 ; 
uc_numbî
 > 0; uc_number--) {

77 
ui_ãmp_¸c
 = 
ui_¸c
 ^ (*
uc_d©a
);

78 
ui_¸c
=(ui_¸c>>8)^
¸c16èb
[
ui_ãmp_¸c
 & 0x00ff];

80 
uc_d©a
++;

82 (
ui_¸c
);

83 
	}
}

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\crc16.h

1 #i‚de‡
__CRC16_H__


2 
	#__CRC16_H__


	)

4 
	~"¥j_ty≥.h
"

7 
CÆCrc16
(
Crc
,
C
);

10 
U16
 
¸c16_ˇl
(
U8
 *
uc_d©a
, U8 
uc_numbî
);

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\parser.c

4 
	~"hw.h
"

5 
	~"hÆ_£rül.h
"

6 
	~"∑r£r.h
"

7 
	~"comm.h
"

8 
	~"timî.h
"

10 
	~"∑r£r_maö.h
"

11 
	~"comm_queue.h
"

13 
	#DEBUG_COMM
 1

	)

15 #i‡
DEBUG_COMM


16 
	s_debug_comm_


18 
U32
 
	mrx_˙t
;

19 
U32
 
	mrx_îr
;

21 
U32
 
	mtx_˙t
;

22 } 
	tdebug_comm_t
;

23 
debug_comm_t
 
	gd_comm
[ 
MAX_COMM_ID
 ];

27 vﬁ©ûê
U8
 
	gpkt_ªcv
[ 
MAX_COMM_RX_BUF_SZ
 ];

28 
I16
 
	gpkt_ªcv_Àn
 = 0;

31 vﬁ©ûê
U8
 
	gpkt_£nd
[ 
MAX_COMM_TX_BUF_SZ
 ];

32 
I16
 
	gpkt_£nd_Àn
 = 0;

37 
	$I16
 (*
	t‚_∑r£r_rx_t
)–
	tU8
 *
	tbuf
, 
	tI16
 
	tÀn
 );

38 
	s_∑r£r_li°_


40 
U8
 
TimîId
;

41 
U8
 
CommId
;

42 
‚_∑r£r_rx_t
 
IsVÆidPkt
;

43 
‚_∑r£r_rx_t
 
P¨£rPkt
;

44 } 
	t∑r£r_rx_li°_t
;

46 c⁄° 
∑r£r_rx_li°_t
 
∑r£r_rx_li°
[] =

48 { 
TIMER_ID_COMM_MAIN_RX
, 
COMM_ID_MAIN
, 
IsVÆidPkt_Maö
, 
P¨£rPkt_Maö
 },

49 
	}
};

50 
	#MAX_PARSER_RX_NUM
 ( –
∑r£r_rx_li°
Ë/ –
∑r£r_rx_li°_t
 ) )

	)

52 
	$RecvPackëH™dÀr
( )

54 
∑r£r_rx_li°_t
 *
p_li°
;

55 
U8
 
i
;

57  
i
 = 0 ; i < 
MAX_PARSER_RX_NUM
 ; i++ )

59 
p_li°
 = &
∑r£r_rx_li°
[ 
i
 ];

60 if–
	`IsExpúedTimî
–
p_li°
->
TimîId
 ) =
TIMER_EXPIRE
 )

62 
	`DißbÀTimî
–
p_li°
->
TimîId
 );

64 if––
pkt_ªcv_Àn
 = 
	`CommRecvPackë
–
p_li°
->
CommId
, &
pkt_ªcv
[0] ) ) > 0 )

66 
	`HAL_InôRecvLígth
–
p_li°
->
CommId
 );

68 if–
p_li°
->
	`IsVÆidPkt
–&
pkt_ªcv
[0], 
pkt_ªcv_Àn
 ) =
TRUE
 )

70 
p_li°
->
	`P¨£rPkt
–&
pkt_ªcv
[0], 
pkt_ªcv_Àn
 );

72  
p_li°
->
CommId
 )

74 
COMM_ID_MAIN
 :

82 #i‡
DEBUG_COMM


83 
d_comm
[ 
p_li°
->
CommId
 ].
rx_˙t
++;

90 #i‡
DEBUG_COMM


91 
d_comm
[ 
p_li°
->
CommId
 ].
rx_îr
++;

97 
	}
}

103 
	$I16
 (*
	t‚_∑r£r_tx_t
)–
	tCommHódî_T
 *
	tp_comm
, 
	tU8
 *
	tbuf
 );

104 
	$I16
 (*
	t‚_¸c16_t
)–
	tU8
 *
	tbuf
, 
	tI16
 
	tÀn
 );

105 
	s_∑r£r_tx_li°_


107 
U8
 
TimîId
;

108 
U8
 
CommId
;

109 
‚_∑r£r_tx_t
 
make_pkt
;

110 
‚_¸c16_t
 
¸c16
;

112 } 
	t∑r£r_tx_li°_t
;

114 c⁄° 
∑r£r_tx_li°_t
 
∑r£r_tx_li°
[] =

116 { 
TIMER_ID_COMM_MAIN_TX
, 
COMM_ID_MAIN
, 
MakePkt_Maö
, 
Crc16_Maö
 },

117 
	}
};

118 
	#MAX_PARSER_TX_NUM
 ( –
∑r£r_tx_li°
Ë/ –
∑r£r_tx_li°_t
 ) )

	)

120 
	$SídPackë
( )

122 
∑r£r_tx_li°_t
 *
p_li°
;

123 
U8
 
i
;

124 
CommHódî_T
 
p_comm
;

127  
i
 = 0 ; i < 
MAX_PARSER_TX_NUM
 ; i++ )

129 
p_li°
 = &
∑r£r_tx_li°
[ 
i
 ];

131 if–
	`IsExpúedTimî
–
p_li°
->
TimîId
 ) =
TIMER_EXPIRE
 )

133 
	`DißbÀTimî
–
p_li°
->
TimîId
 );

135 
p_comm
 = 
	`GëCommHódî
–
p_li°
->
CommId
 );

138 
	`mem£t
–
pkt_£nd
, 0, 
MAX_COMM_TX_BUF_SZ
 );

139 
pkt_£nd_Àn
 = 
p_li°
->
	`make_pkt
–(
CommHódî_T
 *)
p_comm
, 
pkt_£nd
 );

140 if–
pkt_£nd_Àn
 > 0 )

143 
pkt_£nd_Àn
 = 
p_li°
->
	`¸c16
–
pkt_£nd
,Ökt_send_len );

146 
	`CommSídPackë
–
p_li°
->
CommId
, 
pkt_£nd
, 
pkt_£nd_Àn
 );

148 #i‡
DEBUG_COMM


149 
d_comm
[ 
p_li°
->
CommId
 ].
tx_˙t
++;

154  
p_li°
->
TimîId
 )

156 
TIMER_ID_COMM_MAIN_TX
 :

157 
	`HAL_InôCommId
–
COMM_ID_MAIN
 );

166 
	}
}

170 
	$SídPackëH™dÀr
( )

172 
	`SídPackëQueueFr⁄t
();

173 
	`SídPackë
();

174 
	}
}

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\parser.h

1 #i‚de‡
__PARSER_H__


2 
	#__PARSER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
RecvPackëH™dÀr
( );

7 
SídPackëH™dÀr
( );

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\parser_main.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

7 
	~"∑r£r_maö.h
"

8 
	~"utû.h
"

9 
	~"timî.h
"

11 
	~"hÆ_Àd.h
"

12 
	~"hÆ_key.h
"

13 
	~"comm_queue.h
"

19 
	#STX
 0xAA

	)

20 
	#ETX
 0x55

	)

22 
	#MIN_PKT_SZ
 5

	)

24 
U16
 
	$Rx_CRC_CCITT
(
U8
 *
puchMsg
, 
U16
 
usD©aLí
)

26 
U8
 
i
 = 0;

27 
U16
 
wCRCö
 = 0x0000;

28 
U16
 
wCPﬁy
 = 0x1021;

29 
U8
 
wCh¨
 = 0;

31 
usD©aLí
--)

33 
wCh¨
 = *(
puchMsg
++);

34 
wCRCö
 ^((
U16
)
wCh¨
 << 8);

35 
i
 = 0; i < 8; i++)

37 i‡(
wCRCö
 & 0x8000)

39 
wCRCö
 = (wCRCö << 1Ë^ 
wCPﬁy
;

43 
wCRCö
 = wCRCin << 1;

48  (
wCRCö
);

49 
	}
}

51 
U8
 
	$check_¸c
–
U8
 *
buf
, 
I16
 
Àn
 )

53 
U16
 
¸c16
 = 0;

55 
¸c16
 = ( ( (
U16
)
buf
[ 
Àn
 - 3 ] ) << 8 ) & 0xFF00;

56 
¸c16
 |(
U16
)–
buf
[ 
Àn
 - 2 ] );

58 if–
¸c16
 !
	`Rx_CRC_CCITT
–
buf
, (
U16
)–
Àn
 - 3 ) ) )

60  
FALSE
;

63  
TRUE
;

64 
	}
}

66 
U8
 
	gdbg_îr_1
 = 0;

67 
U8
 
	gdbg_îr_2
 = 0;

68 
U8
 
	gdbg_îr_3
 = 0;

69 
I16
 
	$IsVÆidPkt_Maö
–
U8
 *
buf
, 
I16
 
Àn
 )

71 if–
buf
 =
NULL
 )

73 
dbg_îr_1
++;

74  
FALSE
;

77 if–
Àn
 < 
MIN_PKT_SZ
 )

79 
dbg_îr_2
++;

80  
FALSE
;

83 if–
	`check_¸c
–
buf
, 
Àn
 ) =
FALSE
 )

85 
dbg_îr_3
++;

86  
FALSE
;

89  
TRUE
;

90 
	}
}

93 
I16
 
P¨£rReqLed
(
U8
 *
buf
);

94 
I16
 
P¨£rAckKey
(
U8
 *
buf
);

96 
	$I16
 (*
	ta˘i⁄_t
)–
	tU8
 *
	tbuf
 );

97 
	s_∑r£r_li°_t


99 
U8
 
Ty≥
;

100 
a˘i⁄_t
 
P¨£r
;

101 } 
	t∑r£r_li°_t
;

102 c⁄° 
∑r£r_li°_t
 
∑r£r_li°
[] =

104 { 
PKT_REQ_LED
, 
P¨£rReqLed
 },

105 { 
PKT_ACK_KEY
, 
P¨£rAckKey
 },

106 
	}
};

108 
	#SZ_PS_TABLE
 ( –
∑r£r_li°
 ) / –
∑r£r_li°_t
 ))

	)

110 
I16
 
	$P¨£rPkt_Maö
–
U8
 *
buf
, 
I16
 
Àn
)

112 
U8
 
mu8Ty≥
;

113 
a˘i⁄_t
 
pP¨£r
;

114 
U8
 
i
;

117  
i
 = 0; i < 
SZ_PS_TABLE
; i++ )

119 
mu8Ty≥
 = 
∑r£r_li°
[ 
i
 ].
Ty≥
;

120 
pP¨£r
 = 
∑r£r_li°
[ 
i
 ].
P¨£r
;

122 if–
mu8Ty≥
 =
buf
[1] )

124 if–
pP¨£r
 !
NULL
 )

126 
Àn
 = 
	`pP¨£r
–&
buf
[2] );

132  
Àn
;

133 
	}
}

135 
I16
 
	$Crc16_Maö
–
U8
 *
buf
, 
I16
 
Àn
 )

137 
U16
 
mu16Chksum
 = 0;

140 if–
Àn
 < 
MIN_PKT_SZ
 )

145 
mu16Chksum
 = 
	`Rx_CRC_CCITT
–
buf
, (
U16
)(
Àn
 - 3));

146 
buf
[ 
Àn
 - 3 ] = 
	`GET_HIGH_BYTE
(
mu16Chksum
);

147 
buf
[ 
Àn
 - 2 ] = 
	`GET_LOW_BYTE
(
mu16Chksum
);

149  
Àn
;

150 
	}
}

159 
U8
 
	gthe_duty
 = 50;

160 
I16
 
	$P¨£rReqLed
(
U8
 *
buf
)

162 
U32
 
mu32VÆ
;

166 
	`HAL_SëOnOffLED
–&
buf
[0], 
MAX_LED
 );

169 #i‡
CONFIG_DIMMING


170 
	`HAL_SëDimmögLED
–&
buf
[2], 
MAX_LED
 );

171 
	`HAL_SëDimmögDuty
–
buf
[4] );

172 
	`HAL_SëOnOffDuty
–
buf
[5] );

174 
	`HAL_SëDimmögLED
( 0UL );

183 
	`SëCommQueueFr⁄t
–
PKT_ACK_LED
 );

184  
TRUE
;

185 
	}
}

187 
I16
 
	$P¨£rAckKey
(
U8
 *
buf
)

189 
	`Re˚ivedFr⁄tAck
–
PKT_REQ_KEY
 );

191  
TRUE
;

192 
	}
}

197 
	s_make_li°_t


199 
U8
 
	mTy≥
;

200 
a˘i⁄_t
 
	mMakePkt
;

201 } 
	tmake_li°_t
;

203 
I16
 
MakePktAckLed
–
U8
 *
buf
 );

204 
I16
 
MakePktReqKey
–
U8
 *
buf
 );

205 c⁄° 
make_li°_t
 
	gmake_li°
[] =

207 { 
PKT_ACK_LED
, 
MakePktAckLed
 },

208 { 
PKT_REQ_KEY
, 
MakePktReqKey
 },

210 
	#SZ_TABLE
 ( –
make_li°
 ) / –
make_li°_t
 ))

	)

212 
I16
 
	$MakePkt_Maö
–
CommHódî_T
 *
p_comm
, 
U8
 *
buf
 )

214 
U8
 
mu8Ty≥
;

215 
a˘i⁄_t
 
p_make_pkt
;

216 
U8
 
i
;

217 
I16
 
Àn
 = -1;

220  
i
 = 0; i < 
SZ_TABLE
; i++ )

222 
mu8Ty≥
 = 
make_li°
[ 
i
 ].
Ty≥
;

223 
p_make_pkt
 = 
make_li°
[ 
i
 ].
MakePkt
;

225 if–
mu8Ty≥
 =(
U8
)
p_comm
 )

227 if–
p_make_pkt
 !
NULL
 )

229 
Àn
 = 
	`p_make_pkt
–
buf
 );

235  
Àn
;

236 
	}
}

242 
I16
 
	$MakePktReqKey
–
U8
 *
buf
 )

244 
I16
 
mi16Lí
 = 0;

245 
U16
 
mu16VÆ
 = 0;

246 
U32
 
mu32VÆ
 = 0;

250 
buf
[ 
mi16Lí
++ ] = 
STX
;

253 
buf
[ 
mi16Lí
++ ] = 
PKT_REQ_KEY
;

256 
mu32VÆ
 = 
	`HAL_GëKeyVÆ
();

257 
buf
[ 
mi16Lí
++ ] = 
	`GET_32_BYTE_32
–
mu32VÆ
 );

258 
buf
[ 
mi16Lí
++ ] = 
	`GET_32_BYTE_24
–
mu32VÆ
 );

259 
buf
[ 
mi16Lí
++ ] = 
	`GET_32_BYTE_16
–
mu32VÆ
 );

260 
buf
[ 
mi16Lí
++ ] = 
	`GET_32_BYTE_8
–
mu32VÆ
 );

263 
buf
[ 
mi16Lí
++ ] = 0;

266 
buf
[ 
mi16Lí
++ ] = 0;

267 
buf
[ 
mi16Lí
++ ] = 0;

269 
buf
[ 
mi16Lí
++ ] = 0;

270 
buf
[ 
mi16Lí
++ ] = 0;

272 
buf
[ 
mi16Lí
++ ] = 0;

273 
buf
[ 
mi16Lí
++ ] = 0;

275 
buf
[ 
mi16Lí
++ ] = 0;

276 
buf
[ 
mi16Lí
++ ] = 0;

279 
buf
[ 
mi16Lí
++ ] = 0;

280 
buf
[ 
mi16Lí
++ ] = 0;

282 
buf
[ 
mi16Lí
++ ] = 
ETX
;

283  
mi16Lí
;

284 
	}
}

286 
I16
 
	$MakePktAckLed
–
U8
 *
buf
 )

288 
I16
 
mi16Lí
 = 0;

292 
buf
[ 
mi16Lí
++ ] = 
STX
;

295 
buf
[ 
mi16Lí
++ ] = 
PKT_ACK_LED
;

299 
buf
[ 
mi16Lí
++ ] = 0;

300 
buf
[ 
mi16Lí
++ ] = 0;

302 
buf
[ 
mi16Lí
++ ] = 
ETX
;

303  
mi16Lí
;

304 
	}
}

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\parser_main.h

1 #i‚de‡
__PARSER_MAIN_H__


2 
	#__PARSER_MAIN_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"comm.h
"

7 
	#PKT_ACK
 0x80

	)

9 
	#PKT_REQ_LED
 0x01

	)

10 
	#PKT_ACK_LED
 (0x80|
PKT_REQ_LED
)

	)

12 
	#PKT_REQ_KEY
 0x10

	)

13 
	#PKT_ACK_KEY
 (0x80|
PKT_REQ_KEY
)

	)

15 
I16
 
IsVÆidPkt_Maö
–
U8
 *
buf
, I16 
Àn
 );

16 
I16
 
P¨£rPkt_Maö
–
U8
 *
buf
, I16 
Àn
);

17 
I16
 
Crc16_Maö
–
U8
 *
buf
, I16 
Àn
 );

18 
I16
 
MakePkt_Maö
–
CommHódî_T
 *
p_comm
, 
U8
 *
buf
 );

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\config.h

1 #i‚de‡
__CONFIG_H__


2 
	#__CONFIG_H__


	)

5 
	#CONFIG_DIMMING
 1

	)

7 
	#CONFIG_VOICE_NUVOTON
 1

8 

	)

9 
	#CONFIG_FOTA_LIB
 0

	)

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hal_key.c

1 
	~"hw.h
"

2 
	~"hÆ_key.h
"

5 
	#HAL_KEY_PUSHED
 
LOW


	)

6 
	#HAL_LEVER_PUSHED
 
LOW


	)

8 
	#DEFAULT_COUNT
 50

	)

9 
U32
 
	ggu32Key
 = 0UL;

10 
U32
 
	ggu32KeyOut
 = 0UL;

12 
U32
 
	$HAL_GëKeyVÆ
()

14 
U32
 
mu32VÆ
 = 0UL;

16 
mu32VÆ
 = 
gu32Key
 | 
gu32KeyOut
;

17  
mu32VÆ
;

18 
	}
}

20 
	$SˇnKey
()

22 
U16
 
mu16Cou¡
 = 0;

23 
U32
 
mu32PªvVÆ
 = 0;

24 
U32
 
mu32VÆ
 = 0;

28 if–
P_KEY_1
 =
HAL_KEY_PUSHED
 )

30 
mu32VÆ
 |
HAL_KEY_1
;

34 if–
mu32PªvVÆ
 !
mu32VÆ
 )

36 
mu32PªvVÆ
 = 
mu32VÆ
;

37 
mu16Cou¡
 = 
DEFAULT_COUNT
;

42 if–
mu16Cou¡
 != 0 )

44 
mu16Cou¡
--;

49 
gu32Key
 = 
mu32VÆ
;

50 
	}
}

52 
	$SˇnKeyOut
()

54 
U32
 
mu32Cou¡
 = 0;

55 
U32
 
mu32PªvVÆ
 = 0;

56 
U32
 
mu32VÆ
 = 0;

72 if–
mu32PªvVÆ
 !
mu32VÆ
 )

74 
mu32PªvVÆ
 = 
mu32VÆ
;

75 
mu32Cou¡
 = 
DEFAULT_COUNT
;

80 if–
mu32Cou¡
 != 0 )

82 
mu32Cou¡
--;

87 
gu32KeyOut
 = 
mu32VÆ
;

88 
	}
}

90 
	$HAL_SˇnKey
()

92 
	`SˇnKey
();

94 
	}
}

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hal_key.h

1 #i‚de‡
__HAL_KEY_H__


2 
	#__HAL_KEY_H__


	)

4 
	#HAL_KEY_NONE
 0x00000000UL

	)

5 
	#HAL_KEY_1
 0x00000001UL

	)

7 
	#HAL_KEY_ALL
 0x000FFFFFUL

	)

8 
U32
 
HAL_GëKeyVÆ
();

11 
HAL_SˇnKey
();

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hal_led.c

1 #¥agm®
öãºu±
 
INTTM01
 
r_èu0_ch™√l1_öãºu±


3 
	~"hw.h
"

4 
	~"hÆ_Àd.h
"

5 
	~"hÆ_Àd_⁄off.h
"

8 
	#MAX_TICK
 10UL

9 
U16
 
u16Cy˛e
 = 
MAX_TICK
;

	)

10 
U16
 
	gGroupB_DimmögTick
 = 
MAX_TICK
;

11 
U16
 
	gGroupB_OnOffTick
 = 
MAX_TICK
;

13 
	s_Àds_


15 
U8
 
	mLeds
[ 
MAX_LED
 ];

16 
U8
 
	mDuty
;

18 
U16
 
	mC⁄fTick
;

19 
U16
 
	mTick
;

20 } 
	tLed_T
;

22 
Led_T
 
	gOnOff
;

23 
Led_T
 
	gDimmög
;

28 
U8
 
	$IsSëBô
(
U8
 *
pBuf
, U8 
mu8VÆ
)

30 
U8
 
mu8Byã
;

31 
U8
 
mu8Bô
;

32 
U8
 
mu8OnOff
;

34 
mu8Byã
 = 
mu8VÆ
 / 8;

35 
mu8Bô
 = 
mu8VÆ
 % 8;

36 
mu8OnOff
 = (
U8
)(
pBuf
[ 
mu8Byã
 ] & (1U<<
mu8Bô
));

37 if–
mu8OnOff
 != 0 )

39  
ON
;

42  
OFF
;

43 
	}
}

46 
U16
 
	$CÆcDuty2Tick
–
U8
 
mu8Duty
 )

48 
U16
 
mu16Tick
 = 0;

50 if–
mu8Duty
 > 100 )

52 
mu8Duty
 = 100;

54 if–
mu8Duty
 < 1 )

56 
mu8Duty
 = 1;

59 
mu16Tick
 = (
U16
)((
MAX_TICK
 * (U16)
mu8Duty
) / 100UL);

61  
mu16Tick
;

62 
	}
}

64 
	$HAL_Tu∫OnOffLED
(
LedId_T
 
Àd
, 
U8
 
mu8OnOff
)

66 
U8
 
mu8Byã
;

67 
U8
 
mu8Bô
;

69 
mu8Byã
 = 
Àd
 / 8;

70 
mu8Bô
 = 
Àd
 % 8;

71 if–
mu8OnOff
 =
ON
 )

73 
OnOff
.
Leds
[ 
mu8Byã
 ] |((
U8
)1U<<
mu8Bô
);

77 
OnOff
.
Leds
[ 
mu8Byã
 ] &~((
U8
)1U<<
mu8Bô
);

80 
	}
}

82 
	$HAL_SëOnOffLED
(
U8
 *
pLeds
, U8 
mu8Size
 )

84 
	`mem˝y
–&
OnOff
.
Leds
[0], 
pLeds
, 
mu8Size
 );

85 
	}
}

88 
	$HAL_SëOnOffDuty
(
U8
 
mu8Duty
)

90 
OnOff
.
Duty
 = 
mu8Duty
;

91 
OnOff
.
C⁄fTick
 = 
	`CÆcDuty2Tick
–
mu8Duty
 );

92 
	}
}

95 
	$HAL_SëDimmögLED
(
U8
 *
pLeds
, U8 
mu8Size
)

97 
	`mem˝y
–&
Dimmög
.
Leds
[0], 
pLeds
, 
mu8Size
 );

98 
	}
}

101 
	$HAL_SëDimmögDuty
(
U8
 
mu8Duty
)

103 
Dimmög
.
Duty
 = 
mu8Duty
;

104 
Dimmög
.
C⁄fTick
 = 
	`CÆcDuty2Tick
–
mu8Duty
 );

105 
	}
}

109 (*
	tA˘i⁄_T
)(
	tU8
 
	tmu8OnOff
);

110 
	s_⁄off_Àd_


112 
U8
 
Led
;

113 
A˘i⁄_T
 
pfOnOff
;

114 } 
	tOnOff_T
;

119 
OnOff_T
 
Group_A_Li°
[] =

121 { 0, 
HAL_OnOffLed_01
 },

122 { 1, 
HAL_OnOffLed_02
 },

123 { 2, 
HAL_OnOffLed_03
 },

124 { 3, 
HAL_OnOffLed_04
 },

125 { 4, 
HAL_OnOffLed_05
 },

126 { 5, 
HAL_OnOffLed_06
 },

127 { 6, 
HAL_OnOffLed_07
 },

129 { 7, 
HAL_OnOffLed_08
 },

130 { 8, 
HAL_OnOffLed_09
 },

131 { 9, 
HAL_OnOffLed_10
 },

132 { 10, 
HAL_OnOffLed_11
 },

133 { 11, 
HAL_OnOffLed_12
 },

134 
	}
};

135 
	#SZ_GROUP_A_LIST
 ((
Group_A_Li°
)/(
OnOff_T
))

	)

140 
	$OnOffLed
(
OnOff_T
 *
pLi°
, 
U8
 
mu8Li°Size
, U8 *
pOnOff
, U8 *
pDimmög
, U8 
mu8OnOff
)

142 
U8
 
i
;

143 
U8
 
mu8Led
;

144 
A˘i⁄_T
 
pfOnOff
;

146  
i
 = 0 ; i < 
mu8Li°Size
; i++ )

148 
mu8Led
 = 
pLi°
[ 
i
 ].
Led
;

150 if–
	`IsSëBô
(
pOnOff
, 
mu8Led
 ) =
ON
 )

153 
pfOnOff
 = 
pLi°
[ 
i
 ].pfOnOff;

154 if–
pfOnOff
 !
NULL
 )

156 
	`pfOnOff
–
mu8OnOff
 );

160 
	}
}

163 
	$OnOffDimmög
(
OnOff_T
 *
pLi°
, 
U8
 
mu8Li°Size
, U8 *
pOnOff
, U8 *
pDimmög
, U8 
mu8OnOff
)

165 
U8
 
i
;

166 
U8
 
mu8Led
;

167 
A˘i⁄_T
 
pfOnOff
;

169  
i
 = 0 ; i < 
mu8Li°Size
; i++ )

171 
mu8Led
 = 
pLi°
[ 
i
 ].
Led
;

174 if–
	`IsSëBô
(
pOnOff
, 
mu8Led
 ) =
OFF
 )

176 
pfOnOff
 = 
pLi°
[ 
i
 ].pfOnOff;

178 if–
pfOnOff
 !
NULL
 )

181 if–
	`IsSëBô
(
pDimmög
, 
mu8Led
 ) =
ON
 )

184 
	`pfOnOff
–
mu8OnOff
 );

185 if–
mu8OnOff
 =
ON
 )

187 
	`pfOnOff
–
ON
 );

191 
	`pfOnOff
–
OFF
 );

196 
	`pfOnOff
–
OFF
 );

201 
	}
}

211 
	$C⁄åﬁLed
()

213 if–
u16Cy˛e
 == 0 )

215 
u16Cy˛e
 = 
MAX_TICK
;

218 
Dimmög
.
Tick
 = Dimmög.
C⁄fTick
;

219 
OnOff
.
Tick
 = OnOff.
C⁄fTick
;

222 if–
u16Cy˛e
 != 0 )

224 --
u16Cy˛e
;

233 if–
Dimmög
.
Tick
 != 0 )

236 
Dimmög
.
Tick
--;

237 
	`OnOffDimmög
–
Group_A_Li°
, 
SZ_GROUP_A_LIST
, &
OnOff
.
Leds
[0], &
Dimmög
.Leds[0], 
ON
 );

242 
	`OnOffDimmög
–
Group_A_Li°
, 
SZ_GROUP_A_LIST
, &
OnOff
.
Leds
[0], &
Dimmög
.Leds[0], 
OFF
 );

246 if–
OnOff
.
Tick
 != 0 )

249 
OnOff
.
Tick
--;

250 
	`OnOffLed
–
Group_A_Li°
, 
SZ_GROUP_A_LIST
, &
OnOff
.
Leds
[0], &
Dimmög
.Leds[0], 
ON
 );

255 
	`OnOffLed
–
Group_A_Li°
, 
SZ_GROUP_A_LIST
, &
OnOff
.
Leds
[0], &
Dimmög
.Leds[0], 
OFF
 );

257 
	}
}

262 
__öãºu±
 
	$r_èu0_ch™√l1_öãºu±
()

264 
	`EI
();

265 
	`C⁄åﬁLed
();

266 
	}
}

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hal_led.h

1 #i‚de‡
__HAL_LED_H__


2 
	#__HAL_LED_H__


	)

7 
	mSEG_1
,

8 
	mSEG_2
,

9 
	mSEG_3
,

10 
	mSEG_4
,

11 
	mSEG_5
,

12 
	mSEG_6
,

13 
	mSEG_7
,

14 
	mSEG_8
,

15 
	mSEG_9
,

16 
	mSEG_10
,

17 
	mSEG_11
,

18 
	mSEG_12
,

20 
	mLED_ALL
,

22 
	mMAX_LED_NUM


23 } 
	tLedId_T
;

24 
	#MAX_LED
 2

	)

26 
HAL_Tu∫OnOffLED
(
LedId_T
 
Àd
, 
U8
 
mu8OnOff
);

28 
HAL_SëOnOffLED
(
U8
 *
pLeds
, U8 
mu8Size
 );

29 
HAL_SëOnOffDuty
(
U8
 
mu8Duty
);

31 
HAL_SëDimmögLED
(
U8
 *
pLeds
, U8 
mu8Size
);

32 
HAL_SëDimmögDuty
(
U8
 
mu8Duty
);

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hal_led_onoff.c

1 
	~"hw.h
"

2 
	~"hÆ_Àd_⁄off.h
"

4 
	$HAL_OnOffLed_01
(
U8
 
mu8OnOff
)

6 
P_LED_01
 = 
mu8OnOff
;

7 
	}
}

9 
	$HAL_OnOffLed_02
(
U8
 
mu8OnOff
)

11 
P_LED_02
 = 
mu8OnOff
;

12 
	}
}

14 
	$HAL_OnOffLed_03
(
U8
 
mu8OnOff
)

16 
P_LED_03
 = 
mu8OnOff
;

17 
	}
}

19 
	$HAL_OnOffLed_04
(
U8
 
mu8OnOff
)

21 
P_LED_04
 = 
mu8OnOff
;

22 
	}
}

24 
	$HAL_OnOffLed_05
(
U8
 
mu8OnOff
)

26 
P_LED_05
 = 
mu8OnOff
;

27 
	}
}

29 
	$HAL_OnOffLed_06
(
U8
 
mu8OnOff
)

31 
P_LED_06
 = 
mu8OnOff
;

32 
	}
}

34 
	$HAL_OnOffLed_07
(
U8
 
mu8OnOff
)

36 
P_LED_07
 = 
mu8OnOff
;

37 
	}
}

39 
	$HAL_OnOffLed_08
(
U8
 
mu8OnOff
)

41 
P_LED_08
 = 
mu8OnOff
;

42 
	}
}

44 
	$HAL_OnOffLed_09
(
U8
 
mu8OnOff
)

46 
P_LED_09
 = 
mu8OnOff
;

47 
	}
}

49 
	$HAL_OnOffLed_10
(
U8
 
mu8OnOff
)

51 
P_LED_10
 = 
mu8OnOff
;

52 
	}
}

54 
	$HAL_OnOffLed_11
(
U8
 
mu8OnOff
)

56 
P_LED_11
 = 
mu8OnOff
;

57 
	}
}

59 
	$HAL_OnOffLed_12
(
U8
 
mu8OnOff
)

61 
P_LED_12
 = 
mu8OnOff
;

62 
	}
}

66 
	$HAL_OnOffLed_11
(
U8
 
mu8OnOff
)

68 
P_LED_11
 = 
mu8OnOff
;

69 
	}
}

71 
	$HAL_OnOffLed_12
(
U8
 
mu8OnOff
)

73 
P_LED_12
 = 
mu8OnOff
;

74 
	}
}

76 
	$HAL_OnOffLed_13
(
U8
 
mu8OnOff
)

78 
P_LED_13
 = 
mu8OnOff
;

79 
	}
}

81 
	$HAL_OnOffLed_14
(
U8
 
mu8OnOff
)

83 
P_LED_14
 = 
mu8OnOff
;

84 
	}
}

86 
	$HAL_OnOffLed_15
(
U8
 
mu8OnOff
)

88 
P_LED_15
 = 
mu8OnOff
;

89 
	}
}

91 
	$HAL_OnOffLed_16
(
U8
 
mu8OnOff
)

93 
P_LED_16
 = 
mu8OnOff
;

94 
	}
}

96 
	$HAL_OnOffLed_17
(
U8
 
mu8OnOff
)

98 
P_LED_17
 = 
mu8OnOff
;

99 
	}
}

103 
	$HAL_OnOffLed_21
(
U8
 
mu8OnOff
)

105 
P_LED_21
 = 
mu8OnOff
;

106 
	}
}

108 
	$HAL_OnOffLed_22
(
U8
 
mu8OnOff
)

110 
P_LED_22
 = 
mu8OnOff
;

111 
	}
}

113 
	$HAL_OnOffLed_23
(
U8
 
mu8OnOff
)

115 
P_LED_23
 = 
mu8OnOff
;

116 
	}
}

118 
	$HAL_OnOffLed_24
(
U8
 
mu8OnOff
)

120 
P_LED_24
 = 
mu8OnOff
;

121 
	}
}

123 
	$HAL_OnOffLed_25
(
U8
 
mu8OnOff
)

125 
P_LED_25
 = 
mu8OnOff
;

126 
	}
}

128 
	$HAL_OnOffLed_26
(
U8
 
mu8OnOff
)

130 
P_LED_26
 = 
mu8OnOff
;

131 
	}
}

133 
	$HAL_OnOffLed_27
(
U8
 
mu8OnOff
)

135 
P_LED_27
 = 
mu8OnOff
;

136 
	}
}

140 
	$HAL_OnOffLed_31
(
U8
 
mu8OnOff
)

142 
P_LED_31
 = 
mu8OnOff
;

143 
	}
}

145 
	$HAL_OnOffLed_32
(
U8
 
mu8OnOff
)

147 
P_LED_32
 = 
mu8OnOff
;

148 
	}
}

150 
	$HAL_OnOffLed_33
(
U8
 
mu8OnOff
)

152 
P_LED_33
 = 
mu8OnOff
;

153 
	}
}

155 
	$HAL_OnOffLed_34
(
U8
 
mu8OnOff
)

157 
P_LED_34
 = 
mu8OnOff
;

158 
	}
}

160 
	$HAL_OnOffLed_35
(
U8
 
mu8OnOff
)

162 
P_LED_35
 = 
mu8OnOff
;

163 
	}
}

165 
	$HAL_OnOffLed_36
(
U8
 
mu8OnOff
)

167 
P_LED_36
 = 
mu8OnOff
;

168 
	}
}

170 
	$HAL_OnOffLed_37
(
U8
 
mu8OnOff
)

172 
P_LED_37
 = 
mu8OnOff
;

173 
	}
}

177 
	$HAL_OnOffLed_41
(
U8
 
mu8OnOff
)

179 
P_LED_41
 = 
mu8OnOff
;

180 
	}
}

182 
	$HAL_OnOffLed_42
(
U8
 
mu8OnOff
)

184 
P_LED_42
 = 
mu8OnOff
;

185 
	}
}

187 
	$HAL_OnOffLed_43
(
U8
 
mu8OnOff
)

189 
P_LED_43
 = 
mu8OnOff
;

190 
	}
}

192 
	$HAL_OnOffLed_44
(
U8
 
mu8OnOff
)

194 
P_LED_44
 = 
mu8OnOff
;

195 
	}
}

197 
	$HAL_OnOffLed_45
(
U8
 
mu8OnOff
)

199 
P_LED_45
 = 
mu8OnOff
;

200 
	}
}

202 
	$HAL_OnOffLed_46
(
U8
 
mu8OnOff
)

204 
P_LED_46
 = 
mu8OnOff
;

205 
	}
}

207 
	$HAL_OnOffLed_47
(
U8
 
mu8OnOff
)

209 
P_LED_47
 = 
mu8OnOff
;

210 
	}
}

214 
	$HAL_OnOffLed_51
(
U8
 
mu8OnOff
)

216 
P_LED_51
 = 
mu8OnOff
;

217 
	}
}

219 
	$HAL_OnOffLed_52
(
U8
 
mu8OnOff
)

221 
P_LED_52
 = 
mu8OnOff
;

222 
	}
}

224 
	$HAL_OnOffLed_53
(
U8
 
mu8OnOff
)

226 
P_LED_53
 = 
mu8OnOff
;

227 
	}
}

229 
	$HAL_OnOffLed_54
(
U8
 
mu8OnOff
)

231 
P_LED_54
 = 
mu8OnOff
;

232 
	}
}

234 
	$HAL_OnOffLed_55
(
U8
 
mu8OnOff
)

236 
P_LED_55
 = 
mu8OnOff
;

237 
	}
}

239 
	$HAL_OnOffLed_56
(
U8
 
mu8OnOff
)

241 
P_LED_56
 = 
mu8OnOff
;

242 
	}
}

244 
	$HAL_OnOffLed_57
(
U8
 
mu8OnOff
)

246 
P_LED_57
 = 
mu8OnOff
;

247 
	}
}

250 
	$HAL_OnOffLed_61
(
U8
 
mu8OnOff
)

252 
P_LED_61
 = 
mu8OnOff
;

253 
	}
}

255 
	$HAL_OnOffLed_62
(
U8
 
mu8OnOff
)

257 
P_LED_62
 = 
mu8OnOff
;

258 
	}
}

260 
	$HAL_OnOffLed_63
(
U8
 
mu8OnOff
)

262 
P_LED_63
 = 
mu8OnOff
;

263 
	}
}

265 
	$HAL_OnOffLed_64
(
U8
 
mu8OnOff
)

267 
P_LED_64
 = 
mu8OnOff
;

268 
	}
}

270 
	$HAL_OnOffLed_65
(
U8
 
mu8OnOff
)

272 
P_LED_65
 = 
mu8OnOff
;

273 
	}
}

275 
	$HAL_OnOffLed_66
(
U8
 
mu8OnOff
)

277 
P_LED_66
 = 
mu8OnOff
;

278 
	}
}

280 
	$HAL_OnOffLed_67
(
U8
 
mu8OnOff
)

282 
P_LED_67
 = 
mu8OnOff
;

283 
	}
}

287 
	$HAL_OnOffLed_71
(
U8
 
mu8OnOff
)

289 
P_LED_71
 = 
mu8OnOff
;

290 
	}
}

292 
	$HAL_OnOffLed_72
(
U8
 
mu8OnOff
)

294 
P_LED_72
 = 
mu8OnOff
;

295 
	}
}

297 
	$HAL_OnOffLed_73
(
U8
 
mu8OnOff
)

299 
P_LED_73
 = 
mu8OnOff
;

300 
	}
}

302 
	$HAL_OnOffLed_74
(
U8
 
mu8OnOff
)

304 
P_LED_74
 = 
mu8OnOff
;

305 
	}
}

307 
	$HAL_OnOffLed_75
(
U8
 
mu8OnOff
)

309 
P_LED_75
 = 
mu8OnOff
;

310 
	}
}

312 
	$HAL_OnOffLed_76
(
U8
 
mu8OnOff
)

314 
P_LED_76
 = 
mu8OnOff
;

315 
	}
}

317 
	$HAL_OnOffLed_77
(
U8
 
mu8OnOff
)

319 
P_LED_77
 = 
mu8OnOff
;

320 
	}
}

324 
	$HAL_OnOffLed_81
(
U8
 
mu8OnOff
)

326 
P_LED_81
 = 
mu8OnOff
;

327 
	}
}

329 
	$HAL_OnOffLed_82
(
U8
 
mu8OnOff
)

331 
P_LED_82
 = 
mu8OnOff
;

332 
	}
}

334 
	$HAL_OnOffLed_83
(
U8
 
mu8OnOff
)

336 
P_LED_83
 = 
mu8OnOff
;

337 
	}
}

339 
	$HAL_OnOffLed_84
(
U8
 
mu8OnOff
)

341 
P_LED_84
 = 
mu8OnOff
;

342 
	}
}

344 
	$HAL_OnOffLed_85
(
U8
 
mu8OnOff
)

346 
P_LED_85
 = 
mu8OnOff
;

347 
	}
}

349 
	$HAL_OnOffLed_86
(
U8
 
mu8OnOff
)

351 
P_LED_86
 = 
mu8OnOff
;

352 
	}
}

354 
	$HAL_OnOffLed_87
(
U8
 
mu8OnOff
)

356 
P_LED_87
 = 
mu8OnOff
;

357 
	}
}

361 
	$HAL_OnOffLed_91
(
U8
 
mu8OnOff
)

363 
P_LED_91
 = 
mu8OnOff
;

364 
	}
}

366 
	$HAL_OnOffLed_92
(
U8
 
mu8OnOff
)

368 
P_LED_92
 = 
mu8OnOff
;

369 
	}
}

371 
	$HAL_OnOffLed_93
(
U8
 
mu8OnOff
)

373 
P_LED_93
 = 
mu8OnOff
;

374 
	}
}

376 
	$HAL_OnOffLed_94
(
U8
 
mu8OnOff
)

378 
P_LED_94
 = 
mu8OnOff
;

379 
	}
}

381 
	$HAL_OnOffLed_95
(
U8
 
mu8OnOff
)

383 
P_LED_95
 = 
mu8OnOff
;

384 
	}
}

386 
	$HAL_OnOffLed_96
(
U8
 
mu8OnOff
)

388 
P_LED_96
 = 
mu8OnOff
;

389 
	}
}

391 
	$HAL_OnOffLed_97
(
U8
 
mu8OnOff
)

393 
P_LED_97
 = 
mu8OnOff
;

394 
	}
}

398 
	$HAL_OnOffLed_101
(
U8
 
mu8OnOff
)

400 
P_LED_101
 = 
mu8OnOff
;

401 
	}
}

403 
	$HAL_OnOffLed_102
(
U8
 
mu8OnOff
)

405 
P_LED_102
 = 
mu8OnOff
;

406 
	}
}

408 
	$HAL_OnOffLed_103
(
U8
 
mu8OnOff
)

410 
P_LED_103
 = 
mu8OnOff
;

411 
	}
}

413 
	$HAL_OnOffLed_104
(
U8
 
mu8OnOff
)

415 
P_LED_104
 = 
mu8OnOff
;

416 
	}
}

418 
	$HAL_OnOffLed_105
(
U8
 
mu8OnOff
)

420 
P_LED_105
 = 
mu8OnOff
;

421 
	}
}

423 
	$HAL_OnOffLed_106
(
U8
 
mu8OnOff
)

425 
P_LED_106
 = 
mu8OnOff
;

426 
	}
}

428 
	$HAL_OnOffLed_107
(
U8
 
mu8OnOff
)

430 
P_LED_107
 = 
mu8OnOff
;

431 
	}
}

435 
	$HAL_OnOffLed_111
(
U8
 
mu8OnOff
)

437 
P_LED_111
 = 
mu8OnOff
;

438 
	}
}

440 
	$HAL_OnOffLed_112
(
U8
 
mu8OnOff
)

442 
P_LED_112
 = 
mu8OnOff
;

443 
	}
}

445 
	$HAL_OnOffLed_113
(
U8
 
mu8OnOff
)

447 
P_LED_113
 = 
mu8OnOff
;

448 
	}
}

450 
	$HAL_OnOffLed_114
(
U8
 
mu8OnOff
)

452 
P_LED_114
 = 
mu8OnOff
;

453 
	}
}

455 
	$HAL_OnOffLed_115
(
U8
 
mu8OnOff
)

457 
P_LED_115
 = 
mu8OnOff
;

458 
	}
}

460 
	$HAL_OnOffLed_116
(
U8
 
mu8OnOff
)

462 
P_LED_116
 = 
mu8OnOff
;

463 
	}
}

465 
	$HAL_OnOffLed_117
(
U8
 
mu8OnOff
)

467 
P_LED_117
 = 
mu8OnOff
;

468 
	}
}

472 
	$HAL_OnOffLed_121
(
U8
 
mu8OnOff
)

474 
P_LED_121
 = !
mu8OnOff
;

475 
	}
}

477 
	$HAL_OnOffLed_122
(
U8
 
mu8OnOff
)

479 
P_LED_122
 = !
mu8OnOff
;

480 
	}
}

482 
	$HAL_OnOffLed_123
(
U8
 
mu8OnOff
)

485 
	}
}

487 
	$HAL_OnOffLed_124
(
U8
 
mu8OnOff
)

490 
	}
}

492 
	$HAL_OnOffLed_125
(
U8
 
mu8OnOff
)

495 
	}
}

497 
	$HAL_OnOffLed_126
(
U8
 
mu8OnOff
)

500 
	}
}

502 
	$HAL_OnOffLed_127
(
U8
 
mu8OnOff
)

505 
	}
}

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hal_led_onoff.h

1 #i‚de‡
__HAL_LED_ONOFF_H__


2 
	#__HAL_LED_ONOFF_H__


	)

7 
HAL_OnOffLed_01
(
U8
 
mu8OnOff
);

8 
HAL_OnOffLed_02
(
U8
 
mu8OnOff
);

9 
HAL_OnOffLed_03
(
U8
 
mu8OnOff
);

10 
HAL_OnOffLed_04
(
U8
 
mu8OnOff
);

11 
HAL_OnOffLed_05
(
U8
 
mu8OnOff
);

12 
HAL_OnOffLed_06
(
U8
 
mu8OnOff
);

13 
HAL_OnOffLed_07
(
U8
 
mu8OnOff
);

14 
HAL_OnOffLed_08
(
U8
 
mu8OnOff
);

15 
HAL_OnOffLed_09
(
U8
 
mu8OnOff
);

16 
HAL_OnOffLed_10
(
U8
 
mu8OnOff
);

17 
HAL_OnOffLed_11
(
U8
 
mu8OnOff
);

18 
HAL_OnOffLed_12
(
U8
 
mu8OnOff
);

27 
HAL_OnOffLed_11
(
U8
 
mu8OnOff
);

28 
HAL_OnOffLed_12
(
U8
 
mu8OnOff
);

29 
HAL_OnOffLed_13
(
U8
 
mu8OnOff
);

30 
HAL_OnOffLed_14
(
U8
 
mu8OnOff
);

31 
HAL_OnOffLed_15
(
U8
 
mu8OnOff
);

32 
HAL_OnOffLed_16
(
U8
 
mu8OnOff
);

33 
HAL_OnOffLed_17
(
U8
 
mu8OnOff
);

37 
HAL_OnOffLed_21
(
U8
 
mu8OnOff
);

38 
HAL_OnOffLed_22
(
U8
 
mu8OnOff
);

39 
HAL_OnOffLed_23
(
U8
 
mu8OnOff
);

40 
HAL_OnOffLed_24
(
U8
 
mu8OnOff
);

41 
HAL_OnOffLed_25
(
U8
 
mu8OnOff
);

42 
HAL_OnOffLed_26
(
U8
 
mu8OnOff
);

43 
HAL_OnOffLed_27
(
U8
 
mu8OnOff
);

47 
HAL_OnOffLed_31
(
U8
 
mu8OnOff
);

48 
HAL_OnOffLed_32
(
U8
 
mu8OnOff
);

49 
HAL_OnOffLed_33
(
U8
 
mu8OnOff
);

50 
HAL_OnOffLed_34
(
U8
 
mu8OnOff
);

51 
HAL_OnOffLed_35
(
U8
 
mu8OnOff
);

52 
HAL_OnOffLed_36
(
U8
 
mu8OnOff
);

53 
HAL_OnOffLed_37
(
U8
 
mu8OnOff
);

57 
HAL_OnOffLed_41
(
U8
 
mu8OnOff
);

58 
HAL_OnOffLed_42
(
U8
 
mu8OnOff
);

59 
HAL_OnOffLed_43
(
U8
 
mu8OnOff
);

60 
HAL_OnOffLed_44
(
U8
 
mu8OnOff
);

61 
HAL_OnOffLed_45
(
U8
 
mu8OnOff
);

62 
HAL_OnOffLed_46
(
U8
 
mu8OnOff
);

63 
HAL_OnOffLed_47
(
U8
 
mu8OnOff
);

67 
HAL_OnOffLed_51
(
U8
 
mu8OnOff
);

68 
HAL_OnOffLed_52
(
U8
 
mu8OnOff
);

69 
HAL_OnOffLed_53
(
U8
 
mu8OnOff
);

70 
HAL_OnOffLed_54
(
U8
 
mu8OnOff
);

71 
HAL_OnOffLed_55
(
U8
 
mu8OnOff
);

72 
HAL_OnOffLed_56
(
U8
 
mu8OnOff
);

73 
HAL_OnOffLed_57
(
U8
 
mu8OnOff
);

76 
HAL_OnOffLed_61
(
U8
 
mu8OnOff
);

77 
HAL_OnOffLed_62
(
U8
 
mu8OnOff
);

78 
HAL_OnOffLed_63
(
U8
 
mu8OnOff
);

79 
HAL_OnOffLed_64
(
U8
 
mu8OnOff
);

80 
HAL_OnOffLed_65
(
U8
 
mu8OnOff
);

81 
HAL_OnOffLed_66
(
U8
 
mu8OnOff
);

82 
HAL_OnOffLed_67
(
U8
 
mu8OnOff
);

86 
HAL_OnOffLed_71
(
U8
 
mu8OnOff
);

87 
HAL_OnOffLed_72
(
U8
 
mu8OnOff
);

88 
HAL_OnOffLed_73
(
U8
 
mu8OnOff
);

89 
HAL_OnOffLed_74
(
U8
 
mu8OnOff
);

90 
HAL_OnOffLed_75
(
U8
 
mu8OnOff
);

91 
HAL_OnOffLed_76
(
U8
 
mu8OnOff
);

92 
HAL_OnOffLed_77
(
U8
 
mu8OnOff
);

96 
HAL_OnOffLed_81
(
U8
 
mu8OnOff
);

97 
HAL_OnOffLed_82
(
U8
 
mu8OnOff
);

98 
HAL_OnOffLed_83
(
U8
 
mu8OnOff
);

99 
HAL_OnOffLed_84
(
U8
 
mu8OnOff
);

100 
HAL_OnOffLed_85
(
U8
 
mu8OnOff
);

101 
HAL_OnOffLed_86
(
U8
 
mu8OnOff
);

102 
HAL_OnOffLed_87
(
U8
 
mu8OnOff
);

106 
HAL_OnOffLed_91
(
U8
 
mu8OnOff
);

107 
HAL_OnOffLed_92
(
U8
 
mu8OnOff
);

108 
HAL_OnOffLed_93
(
U8
 
mu8OnOff
);

109 
HAL_OnOffLed_94
(
U8
 
mu8OnOff
);

110 
HAL_OnOffLed_95
(
U8
 
mu8OnOff
);

111 
HAL_OnOffLed_96
(
U8
 
mu8OnOff
);

112 
HAL_OnOffLed_97
(
U8
 
mu8OnOff
);

116 
HAL_OnOffLed_101
(
U8
 
mu8OnOff
);

117 
HAL_OnOffLed_102
(
U8
 
mu8OnOff
);

118 
HAL_OnOffLed_103
(
U8
 
mu8OnOff
);

119 
HAL_OnOffLed_104
(
U8
 
mu8OnOff
);

120 
HAL_OnOffLed_105
(
U8
 
mu8OnOff
);

121 
HAL_OnOffLed_106
(
U8
 
mu8OnOff
);

122 
HAL_OnOffLed_107
(
U8
 
mu8OnOff
);

126 
HAL_OnOffLed_111
(
U8
 
mu8OnOff
);

127 
HAL_OnOffLed_112
(
U8
 
mu8OnOff
);

128 
HAL_OnOffLed_113
(
U8
 
mu8OnOff
);

129 
HAL_OnOffLed_114
(
U8
 
mu8OnOff
);

130 
HAL_OnOffLed_115
(
U8
 
mu8OnOff
);

131 
HAL_OnOffLed_116
(
U8
 
mu8OnOff
);

132 
HAL_OnOffLed_117
(
U8
 
mu8OnOff
);

136 
HAL_OnOffLed_121
(
U8
 
mu8OnOff
);

137 
HAL_OnOffLed_122
(
U8
 
mu8OnOff
);

138 
HAL_OnOffLed_123
(
U8
 
mu8OnOff
);

139 
HAL_OnOffLed_124
(
U8
 
mu8OnOff
);

140 
HAL_OnOffLed_125
(
U8
 
mu8OnOff
);

141 
HAL_OnOffLed_126
(
U8
 
mu8OnOff
);

142 
HAL_OnOffLed_127
(
U8
 
mu8OnOff
);

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hal_serial.c

3 #¥agm®
öãºu±
 
INTST2
 
r_u¨t2_öãºu±_£nd


4 #¥agm®
öãºu±
 
INTSR2
 
r_u¨t2_öãºu±_ª˚ive


23 
	~"hw.h
"

24 
	~"hÆ_£rül.h
"

25 
	~<°rög.h
>

26 
	~"timî.h
"

32 
	#MAIN_TXD
 
TXD2


	)

33 
	#MAIN_RXD
 
RXD2


	)

36 
	#WIFI_TXD
 
TXD1


	)

37 
	#WIFI_RXD
 
RXD1


	)

39 
	#EOL_TXD
 
TXD2


	)

40 
	#EOL_RXD
 
RXD2


	)

42 
	#LCD_TXD
 
TXD3


	)

43 
	#LCD_RXD
 
RXD3


	)

47 
	s_comm_


49 
U8
 
	mªcv_buf
[ 
MAX_COMM_RX_BUF_SZ
 ];

50 
I16
 
	mªcv_Àn
;

51 
U8
 
	m£nd_buf
[ 
MAX_COMM_TX_BUF_SZ
 ];

52 
I16
 
	m£nd_Àn
;

53 
I16
 
	mtx_Àn
;

54 } 
	tcomm_t
;

56 
comm_t
 
	gcomm
[ 
MAX_COMM_ID
 ];

60 
	$HAL_InôCommId
–
U8
 
u¨t_id
 )

62 
	`mem£t
–&
comm
[ 
u¨t_id
 ], 0, –
comm_t
 ) );

63 
	}
}

65 
	$HAL_InôComm
( )

67 
	`HAL_InôCommId
–
COMM_ID_MAIN
 );

68 
	`R_UART2_Sèπ
();

71 
	`HAL_InôCommId
–
COMM_ID_KEY
 );

72 
	`R_UART0_Sèπ
();

75 
	`HAL_InôCommId
–
COMM_ID_EOL
 );

76 
	`R_UART2_Sèπ
();

78 
	`HAL_InôCommId
–
COMM_ID_LCD
 );

79 
	`R_UART3_Sèπ
();

81 
	}
}

84 
U8
 
	$HAL_IsFuŒRecvBuf„r
–
U8
 
u¨t_id
 )

86 if–
comm
[ 
u¨t_id
 ].
ªcv_Àn
 >
MAX_COMM_RX_BUF_SZ
 )

88  
TRUE
;

91  
FALSE
;

92 
	}
}

94 
U8
 
	$HAL_IsEm±yRecvBuf„r
–
U8
 
u¨t_id
 )

96 if–
comm
[ 
u¨t_id
 ].
ªcv_Àn
 > 0 )

98  
FALSE
;

101  
TRUE
;

103 
	}
}

105 
U8
 
	$HAL_IsFuŒSídBuf„r
–
U8
 
u¨t_id
 )

107 if–
comm
[ 
u¨t_id
 ].
£nd_Àn
 >
MAX_COMM_TX_BUF_SZ
 )

109  
TRUE
;

112  
FALSE
;

113 
	}
}

115 
	$HAL_InôRecvLígth
(
U8
 
u¨t_id
 )

117 
comm
[ 
u¨t_id
 ].
ªcv_Àn
 = 0;

118 
	}
}

120 
I16
 
	$HAL_GëRecvLígth
–
U8
 
u¨t_id
 )

122  
comm
[ 
u¨t_id
 ].
ªcv_Àn
;

123 
	}
}

125 
I16
 
	$HAL_GëSídLígth
–
U8
 
u¨t_id
 )

127  
comm
[ 
u¨t_id
].
£nd_Àn
;

128 
	}
}

131 
	$HAL_SëRecvBuf„r
(
U8
 
u¨t_id
, U8 
_byã
 )

133 
comm_t
 *
p_comm
;

135 
p_comm
 = &
comm
[ 
u¨t_id
 ];

136 
p_comm
->
ªcv_buf
[Ö_comm->
ªcv_Àn
 ] = 
_byã
;

137 
p_comm
->
ªcv_Àn
++;

139 
	}
}

141 
U8
 
	$HAL_GëRecvBuf„r
–
U8
 
u¨t_id
, 
U16
 
ödex
 )

143  
comm
[ 
u¨t_id
 ].
ªcv_buf
[ 
ödex
 ];

144 
	}
}

147 
	$HAL_SëSídBuf„r
–
U8
 
u¨t_id
, U8 
_byã
 )

149 
comm_t
 *
p_comm
;

151 if–
	`HAL_IsFuŒSídBuf„r
–
u¨t_id
 ) =
FALSE
 )

153 
p_comm
 = &
comm
[ 
u¨t_id
 ];

154 
p_comm
->
£nd_buf
[Ö_comm->
£nd_Àn
 ] = 
_byã
;

155 
p_comm
->
£nd_Àn
++;

157 
	}
}

159 
U8
 
	$HAL_GëSídBuf„r
–
U8
 
u¨t_id
, 
U16
 
ödex
 )

161  
comm
[ 
u¨t_id
 ].
£nd_buf
[ 
ödex
 ];

162 
	}
}

165 
	$HAL_SídByã
–
U8
 
u¨t_id
 )

167 
U8
 
ch
;

168 
comm_t
 *
p_comm
;

171 
p_comm
 = &
comm
[ 
u¨t_id
 ];

172 
ch
 = 
p_comm
->
£nd_buf
[Ö_comm->
tx_Àn
 ];

173 
p_comm
->
tx_Àn
++;

176 if–
u¨t_id
 =
COMM_ID_EOL
 )

178 
EOL_TXD
 = 
ch
;

180 if–
u¨t_id
 =
COMM_ID_WIFI
 )

182 
WIFI_TXD
 = 
ch
;

184 if–
u¨t_id
 =
COMM_ID_LCD
 )

186 
LCD_TXD
 = 
ch
;

188 if–
u¨t_id
 =
COMM_ID_KEY
 )

190 
KEY_TXD
 = 
ch
;

193 if–
u¨t_id
 =
COMM_ID_MAIN
 )

195 
MAIN_TXD
 = 
ch
;

197 
	}
}

199 
U8
 
	$IsCom∂ëeTx
–
U8
 
u¨t_id
 )

201 if–
comm
[
u¨t_id
].
tx_Àn
 < comm[ u¨t_id ].
£nd_Àn
 )

203  
FALSE
;

206  
TRUE
;

208 
	}
}

215 
__öãºu±
 
	$r_u¨t0_öãºu±_ª˚ive
()

217 vﬁ©ûê
U8
 
îr_ty≥
;

218 vﬁ©ûê
U8
 
rx_d©a
;

220 
îr_ty≥
 = (
uöt8_t
)(
SSR01
 & 0x0007U);

221 
SIR01
 = (
uöt16_t
)
îr_ty≥
;

223 
rx_d©a
 = 
KEY_RXD
;

225 if–
îr_ty≥
 == 0 )

227 
	`SèπTimî
–
TIMER_ID_COMM_KEY_RX
, 2 );

228 if–
	`HAL_IsFuŒRecvBuf„r
–
COMM_ID_KEY
 ) =
FALSE
 )

230 
	`HAL_SëRecvBuf„r
–
COMM_ID_KEY
, 
rx_d©a
 );

234 
	`HAL_InôCommId
–
COMM_ID_KEY
 );

239 
	}
}

241 
__öãºu±
 
	$r_u¨t0_öãºu±_£nd
()

243 if–
	`IsCom∂ëeTx
–
COMM_ID_KEY
 ) =
FALSE
 )

245 
	`HAL_SídByã
–
COMM_ID_KEY
 );

249 
	`HAL_InôCommId
–
COMM_ID_KEY
 );

251 
	}
}

256 
U16
 
	gdbg_rx_îr_˙t
 = 0;

257 
__öãºu±
 
	$r_u¨t1_öãºu±_ª˚ive
()

259 vﬁ©ûê
U8
 
rx_d©a
;

260 vﬁ©ûê
U8
 
îr_ty≥
;

262 
îr_ty≥
 = (
U8
)(
SSR03
 & 0x0007U);

263 
SIR03
 = (
U16
)
îr_ty≥
;

265 
rx_d©a
 = 
MAIN_RXD
;

267 if–
îr_ty≥
 == 0 )

269 if–
	`HAL_IsFuŒRecvBuf„r
–
COMM_ID_MAIN
 ) =
FALSE
 )

271 
	`HAL_SëRecvBuf„r
–
COMM_ID_MAIN
, 
rx_d©a
 );

275 
	`HAL_InôCommId
–
COMM_ID_MAIN
 );

280 
dbg_rx_îr_˙t
++;

283 
	`SèπTimî
–
TIMER_ID_COMM_MAIN_RX
, 5 );

284 
	}
}

286 
__öãºu±
 
	$r_u¨t1_öãºu±_£nd
()

288 if–
	`IsCom∂ëeTx
–
COMM_ID_MAIN
 ) =
FALSE
 )

290 
	`HAL_SídByã
–
COMM_ID_MAIN
 );

294 
	`HAL_InôCommId
–
COMM_ID_MAIN
 );

296 
	}
}

302 
__öãºu±
 
	$r_u¨t2_öãºu±_ª˚ive
()

304 vﬁ©ûê
U8
 
îr_ty≥
;

305 vﬁ©ûê
U8
 
rx_d©a
;

307 
îr_ty≥
 = (
uöt8_t
)(
SSR11
 & 0x0007U);

308 
SIR11
 = (
uöt16_t
)
îr_ty≥
;

310 
rx_d©a
 = 
MAIN_RXD
;

312 if–
îr_ty≥
 == 0 )

314 if–
	`HAL_IsFuŒRecvBuf„r
–
COMM_ID_MAIN
 ) =
FALSE
 )

316 
	`HAL_SëRecvBuf„r
–
COMM_ID_MAIN
, 
rx_d©a
 );

320 
	`HAL_InôCommId
–
COMM_ID_MAIN
 );

323 
	`SèπTimî
–
TIMER_ID_COMM_MAIN_RX
, 5 );

326 
	}
}

328 
__öãºu±
 
	$r_u¨t2_öãºu±_£nd
()

330 if–
	`IsCom∂ëeTx
–
COMM_ID_MAIN
 ) =
FALSE
 )

332 
	`HAL_SídByã
–
COMM_ID_MAIN
 );

336 
	`HAL_InôCommId
–
COMM_ID_MAIN
 );

338 
	}
}

344 
__öãºu±
 
	$r_u¨t3_öãºu±_ª˚ive
()

346 vﬁ©ûê
U8
 
îr_ty≥
;

347 vﬁ©ûê
U8
 
rx_d©a
;

349 
îr_ty≥
 = (
uöt8_t
)(
SSR13
 & 0x0007U);

350 
SIR13
 = (
uöt16_t
)
îr_ty≥
;

352 
rx_d©a
 = 
EOL_RXD
;

354 if–
îr_ty≥
 == 0 )

356 if–
	`HAL_IsFuŒRecvBuf„r
–
COMM_ID_LCD
 ) =
FALSE
 )

358 
	`HAL_SëRecvBuf„r
–
COMM_ID_LCD
, 
rx_d©a
 );

362 
	`HAL_InôCommId
–
COMM_ID_LCD
 );

365 
	`SèπTimî
–
TIMER_ID_COMM_LCD_RX
, 20 );

367 
	}
}

369 
__öãºu±
 
	$r_u¨t3_öãºu±_£nd
()

371 if–
	`IsCom∂ëeTx
–
COMM_ID_LCD
 ) =
FALSE
 )

373 
	`HAL_SídByã
–
COMM_ID_LCD
 );

377 
	`HAL_InôCommId
–
COMM_ID_LCD
 );

379 
	}
}

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hal_serial.h

1 #i‚de‡
__HAL_SERIAL_H__


2 
	#__HAL_SERIAL_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#COMM_ID_MAIN
 0

	)

8 
	#MAX_COMM_ID
 1

	)

10 
	#COMM_ID_WIFI
 1

	)

11 
	#COMM_ID_EOL
 2

	)

12 
	#COMM_ID_LCD
 3

	)

13 
	#MAX_COMM_ID
 4

	)

16 
	#MAX_COMM_RX_BUF_SZ
 256

	)

17 
	#MAX_COMM_TX_BUF_SZ
 256

	)

19 
HAL_InôCommId
–
U8
 
u¨t_id
 );

20 
HAL_InôComm
( );

22 
U8
 
HAL_IsFuŒRecvBuf„r
–U8 
u¨t_id
 );

23 
U8
 
HAL_IsEm±yRecvBuf„r
–U8 
u¨t_id
 );

24 
U8
 
HAL_IsFuŒSídBuf„r
–U8 
u¨t_id
 );

26 
HAL_InôRecvLígth
(
U8
 
u¨t_id
 );

27 
I16
 
HAL_GëRecvLígth
–
U8
 
u¨t_id
 );

28 
I16
 
HAL_GëSídLígth
–
U8
 
u¨t_id
 );

30 
HAL_SëRecvBuf„r
(
U8
 
u¨t_id
, U8 
_byã
 );

31 
U8
 
HAL_GëRecvBuf„r
–U8 
u¨t_id
, 
U16
 
ödex
 );

33 
HAL_SëSídBuf„r
–
U8
 
u¨t_id
, U8 
_byã
 );

34 
U8
 
HAL_GëSídBuf„r
–U8 
u¨t_id
, 
U16
 
ödex
 );

36 
HAL_SídByã
–
U8
 
u¨t_id
 );

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hw.h

1 #i‚de‡
__HW__H__


2 
	#__HW__H__


	)

4 
	~"mcu.h
"

5 
	~"r_cg_cgc.h
"

6 
	~"r_cg_p‹t.h
"

7 
	~"r_cg_wdt.h
"

8 
	~"r_cg_timî.h
"

9 
	~"r_cg_adc.h
"

10 
	~"r_cg_£rül.h
"

11 
	~"r_cg_ma¸odrivî.h
"

15 
	#RESET_WDT
(Ë
	`R_WDT_Re°¨t
()

	)

17 
	#P_KEY_1
 
P1
.5

	)

20 
	#P_LED_01
 
P1
.7

	)

21 
	#P_LED_02
 
P1
.6

	)

22 
	#P_LED_03
 
P5
.0

	)

23 
	#P_LED_04
 
P5
.1

	)

24 
	#P_LED_05
 
P7
.0

	)

25 
	#P_LED_06
 
P3
.0

	)

26 
	#P_LED_07
 
P7
.2

	)

28 
	#P_LED_08
 
P7
.1

	)

29 
	#P_LED_09
 
P7
.4

	)

30 
	#P_LED_10
 
P7
.3

	)

31 
	#P_LED_11
 
P3
.1

	)

32 
	#P_LED_12
 
P7
.5

	)

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\mcu.h

1 #i‚de‡
__MCU_H__


2 
	#__MCU_H__


	)

4 
	~"r_cg_ma¸odrivî.h
"

6 
	~"¥j_ty≥.h
"

8 
	~"c⁄fig.h
"

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\main.c

1 
	~"mcu.h
"

3 
	~"hw.h
"

4 
	~"timî.h
"

5 
	~"utû.h
"

6 
	~"∑r£r.h
"

8 
	~"¥o˚ss_sys_evít.h
"

11 
	$InôSèπTimîs
( )

13 
	`InôTimî
();

15 
	`SèπTimî
–
TIMER_ID_1MS
, 1);

16 
	`SèπTimî
–
TIMER_ID_10MS
, 10);

17 
	`SèπTimî
–
TIMER_ID_100MS
, 100);

19 
	`SèπTimî
–
TIMER_ID_COMM_WAIT_1
, 100);

20 
	}
}

23 
	$maö
( )

25 
	`Dñay_MS
( 500 );

27 
	`RESET_WDT
();

29 
	`InôSy°em
();

30 
	`InôSèπTimîs
();

31 
	`EI
();

35 
	`RESET_WDT
();

37 
	`Pro˚ssEvítH™dÀr
();

40 
	`RecvPackëH™dÀr
();

41 
	`SídPackëH™dÀr
();

43 
	}
}

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\prj_type.h

1 #i‚de‡
__PRJ_TYPE_H__


2 
	#__PRJ_TYPE_H__


	)

4 
	~"c⁄fig.h
"

5 
	~<°dio.h
>

6 
	~<°rög.h
>

9 
	tU8
;

10 sig√d 
	tI8
;

11 
	tU16
;

12 sig√d 
	tI16
;

13 
	tU32
;

14 sig√d 
	tI32
;

15 
	tF32
;

16 
	tBOOL_T
;

17 
	tTIME_T
;

19 
	tTEMP_T
;

22 
	#__DEBUG__
 1

	)

24 #i‡
__DEBUG__


25 
	#LOCAL


	)

27 
	#LOCAL
 

	)

30 #ifde‡
NULL


31 #unde‡
NULL


34 
	#NULL
 ((*)0)

	)

36 #ifde‡
TRUE


37 #unde‡
TRUE


40 
	#TRUE
 1

	)

42 #ifde‡
FALSE


43 #unde‡
FALSE


46 
	#FALSE
 0

	)

49 #ifde‡
ON


50 #unde‡
ON


53 
	#ON
 1

	)

55 #ifde‡
OFF


56 #unde‡
OFF


59 
	#OFF
 0

	)

61 
	#HIGH
 1

	)

62 
	#LOW
 0

	)

64 #i‡(
CONFIG_FOTA_LIB
 == 0)

65 
	#__FAR


	)

66 
	#SPRINTF
 
•rötf


	)

67 
	#MEMSET
 
mem£t


	)

68 
	#MEMCPY
 
mem˝y


	)

69 
	#MEMCMP
 
memcmp


	)

70 
	#ATOI
 
©oi


	)

72 
	#__FAR
 
__Ár


	)

73 
	#SPRINTF
 
•rötf_f


	)

74 
	#MEMSET
 
mem£t_f


	)

75 
	#MEMCPY
 
mem˝y_f


	)

76 
	#MEMCMP
 
memcmp_f


	)

77 
	#ATOI
 
©oi_f


	)

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\process_sys_event.c

2 
	~"r_cg_timî.h
"

4 
	~"¥j_ty≥.h
"

5 
	~"timî.h
"

6 
	~"¥o˚ss_sys_evít.h
"

8 
	~"hÆ_£rül.h
"

9 
	~"hÆ_Àd.h
"

10 
	~"hÆ_key.h
"

11 
	~"comm_queue.h
"

14 
	~<°dio.h
>

15 
	~<°rög.h
>

18 (*
	tA˘i⁄_T
)();

19 
	s_sys_evít_


21 
U8
 
timîId
;

22 
A˘i⁄_T
 
pFun
;

23 
A˘i⁄_T
 
pFun_FCT
;

24 
A˘i⁄_T
 
pFun_EOL
;

25 } 
	tSysEvít_T
;

28 
	`Evt_1ms_H™dÀr
( );

29 
	`Evt_10ms_H™dÀr
( );

30 
	`Evt_100ms_H™dÀr
( );

32 c⁄° 
SysEvít_T
 
SysEvítLi°
[] =

35 { 
TIMER_ID_1MS
, 
Evt_1ms_H™dÀr
, 
NULL
, NULL },

36 { 
TIMER_ID_10MS
, 
Evt_10ms_H™dÀr
, 
NULL
, NULL },

37 { 
TIMER_ID_100MS
, 
Evt_100ms_H™dÀr
, 
NULL
, NULL },

38 
	}
};

39 
	#SZ_LIST
 ( –
SysEvítLi°
 ) / –
SysEvít_T
 ) )

	)

41 
	$Pro˚ssEvítH™dÀr
( )

43 
U8
 
i
;

44 
A˘i⁄_T
 
fun
;

46  
i
 = 0; i < 
SZ_LIST
 ; i++ )

48 if–
	`IsExpúedTimî
–
SysEvítLi°
[ 
i
 ].
timîId
 ) =
TIMER_EXPIRE
 )

51 
	`DißbÀTimî
–
SysEvítLi°
[ 
i
 ].
timîId
 );

54 
fun
 = 
SysEvítLi°
[ 
i
 ].
pFun
;

57 if–
fun
 !
NULL
 )

59 
	`fun
();

63 
	}
}

65 
	$Evt_1ms_H™dÀr
( )

67 
	`SèπTimî
–
TIMER_ID_1MS
, 1);

69 
	`HAL_SˇnKey
();

71 
	}
}

73 
	$Evt_10ms_H™dÀr
( )

75 
	`SèπTimî
–
TIMER_ID_10MS
, 10);

78 
	}
}

81 
	$Evt_100ms_H™dÀr
()

83 
	`SèπTimî
–
TIMER_ID_100MS
, 100);

84 
	}
}

87 
	$InôSy°em
()

90 
	`HAL_InôComm
();

92 
	`InôCommQueue
();

94 
	`R_TAU0_Ch™√l1_Sèπ
();

95 
	}
}

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\process_sys_event.h

1 #i‚de‡
__PROCESS_SYS_EVENT_H__


2 
	#__PROCESS_SYS_EVENT_H__


	)

4 
InôSy°em
();

6 
Pro˚ssEvítH™dÀr
();

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\queue.c

6 
	~"queue.h
"

10 
	$InôQueue
(
SQueue_T
 *
xStQueue
, *
mUd©a
, 
U8
 
mUd©aSize
, U8 
mUqueueNum
 )

12 
	`MEMSET
–(
__FAR
 *)
mUd©a
, 0, (
mUd©aSize
 * 
mUqueueNum
) );

14 
xStQueue
->
mUª¨
 = 0;

15 
xStQueue
->
mU‰⁄t
 = 0;

16 
xStQueue
->
mUd©a
 = mUdata;

17 
xStQueue
->
mUd©aSize
 = mUdataSize;

18 
xStQueue
->
mUqueueNum
 = mUqueueNum;

19 
	}
}

21 
U8
 
	$IsQueueEm±y
(
SQueue_T
 *
xStQueue
)

23 if–
xStQueue
->
mUª¨
 =xStQueue->
mU‰⁄t
 )

25  
TRUE
;

28  
FALSE
;

29 
	}
}

31 
U8
 
	$IsQueueFuŒ
(
SQueue_T
 *
xStQueue
)

33 if–
xStQueue
->
mU‰⁄t
 =–xStQueue->
mUª¨
 + 1 ) % xStQueue->
mUqueueNum
 )

35  
TRUE
;

38  
FALSE
;

39 
	}
}

41 
	$EnQueue
(
SQueue_T
 *
xStQueue
, *
xUd©a
)

43 if–
	`IsQueueFuŒ
(
xStQueue
Ë=
TRUE
 )

48 
	`MEMCPY
((
U8
 *)
xStQueue
->
mUd©a
 + (xStQueue->
mUª¨
 * xStQueue->
mUd©aSize
), 
xUd©a
, xStQueue->mUdataSize);

49 
xStQueue
->
mUª¨
 = (xStQueue->mUª¨ + 1Ë% xStQueue->
mUqueueNum
;

50 
	}
}

52 
U8
 
	$DeQueue
(
SQueue_T
 *
xStQueue
, *
xU±rD©a
)

54 if–
	`IsQueueEm±y
(
xStQueue
Ë=
TRUE
 )

56  
FALSE
;

59 
	`MEMCPY
(
xU±rD©a
, (
U8
 *)
xStQueue
->
mUd©a
 + (xStQueue->
mU‰⁄t
 * xStQueue->
mUd©aSize
), xStQueue->mUdataSize);

60 
xStQueue
->
mU‰⁄t
 = (xStQueue->mU‰⁄à+ 1Ë% xStQueue->
mUqueueNum
;

62  
TRUE
;

63 
	}
}

65 
U8
 
	$PìkQueue
(
SQueue_T
 *
xStQueue
, *
xU±rD©a
)

67 if–
	`IsQueueEm±y
(
xStQueue
Ë=
TRUE
 )

69  
FALSE
;

72 
	`MEMCPY
(
xU±rD©a
, (
U8
 *)
xStQueue
->
mUd©a
 + ((xStQueue->
mU‰⁄t
 + 1Ë% xStQueue->
mUqueueNum
 * xStQueue->
mUd©aSize
), xStQueue->mUdataSize);

74  
TRUE
;

75 
	}
}

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\queue.h

6 #i‚de‡
__QUEUE_H__


7 
	#__QUEUE_H__


	)

9 
	~"¥j_ty≥.h
"

12 
	s_queue_


14 **
	mmUd©a
;

15 
U16
 
	mmUqueueNum
;

16 
U8
 
	mmUd©aSize
;

18 
U16
 
	mmUª¨
;

19 
U16
 
	mmU‰⁄t
;

20 } 
	tSQueue_T
;

22 
InôQueue
(
SQueue_T
 *
xStQueue
, *
mUd©a
, 
U8
 
mUd©aSize
, U8 
mUqueueNum
 );

24 
U8
 
IsQueueEm±y
(
SQueue_T
 *
xStQueue
);

25 
U8
 
IsQueueFuŒ
(
SQueue_T
 *
xStQueue
);

27 
EnQueue
(
SQueue_T
 *
xStQueue
, *
xUd©a
);

28 
U8
 
DeQueue
(
SQueue_T
 *
xStQueue
, *
xU±rD©a
);

29 
U8
 
PìkQueue
(
SQueue_T
 *
xStQueue
, *
xU±rD©a
);

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\timer\timer.c

1 #¥agm®
öãºu±
 
INTTM00
 
Ba£TimîI¡îru±


3 
	~"hw.h
"

4 
	~"timî.h
"

6 
	~<°rög.h
>

10 
	#INTS_BYTE
(Ë
_öts_byã


	)

11 
	#MASK_BASE_TIMER
 
TMMK00


	)

12 
	#DISABLE_INT_MASK_BASE_TIMER
(Ëdÿ{ 
MASK_BASE_TIMER
 = 1; }0)

	)

13 
	#ENABLE_INT_MASK_BASE_TIMER
(Ëdÿ{ 
MASK_BASE_TIMER
 = 0; }0)

	)

15 
	#ENTER_CRITICAL_SECTION_TIMER
() \

17 
_öts_byã
 = 
MASK_BASE_TIMER
; \

18 
	`DISABLE_INT_MASK_BASE_TIMER
(); \

19 }0)

	)

21 
	#EXIT_CRITICAL_SECTION_TIMER
() \

23 
MASK_BASE_TIMER
 = 
_öts_byã
; \

24 } 0)

	)

27 
	#HZ
 (1UL)

	)

29 
	s_timî_


31 
U8
 
	míabÀ
;

32 
U8
 
	mty≥
;

33 
U32
 
	mtime_out
;

34 } 
	ttimî_öfo_t
;

36 
LOCAL
 
timî_öfo_t
 
	gtimî_öfo
[ 
MAX_TIMER_ID_NUM
 ];

38 (*
pFunU£rISR
)(Ë
NULL
 ;

41 
	$InôTimî
( )

43 
	`mem£t
–
timî_öfo
, 0, (Åimer_info) );

45 
	`R_TAU0_Ch™√l0_Sèπ
();

46 
	}
}

49 
	$SèπTimî
–
U8
 
id
, 
U32
 
time_out
 )

51 
	`INTS_BYTE
();

53 
	`ENTER_CRITICAL_SECTION_TIMER
();

55 
timî_öfo
[ 
id
 ].
íabÀ
 = 1;

56 
timî_öfo
[ 
id
 ].
time_out
 =Åime_ouà/ 
HZ
;

57 #i‡(
HZ
 != 1UL)

58 if–(
time_out
 % 
HZ
Ë>(
U32
)5 )

60 
timî_öfo
[ 
id
 ].
time_out
++;

64 
	`EXIT_CRITICAL_SECTION_TIMER
();

66 
	}
}

68 
	$DißbÀTimî
–
U8
 
id
 )

70 
timî_öfo
[ 
id
 ].
íabÀ
 = 0;

71 
timî_öfo
[ 
id
 ].
time_out
 = (
U32
)-1;

72 
	}
}

74 
	$St›Timî
–
U8
 
id
 )

76 
	`DißbÀTimî
–
id
 );

77 
	}
}

80 
U8
 
	$IsExpúedTimî
–
U8
 
id
 )

82 
U32
 
time_out
;

83 
	`INTS_BYTE
();

86 
	`ENTER_CRITICAL_SECTION_TIMER
();

87 
time_out
 = 
timî_öfo
[ 
id
 ].time_out;

88 
	`EXIT_CRITICAL_SECTION_TIMER
();

90 if–
timî_öfo
[ 
id
 ].
íabÀ
 == 0 )

92  
TIMER_DISABLE
;

95 if–
time_out
 > 0 )

97  
TIMER_NOT_EXPIRE
;

100  
TIMER_EXPIRE
;

101 
	}
}

104 
	$Upd©eTimî
( )

106 
U8
 
i
;

108  
i
 = 0 ; i < 
MAX_TIMER_ID_NUM
 ; i++ )

110 if–
timî_öfo
[ 
i
 ].
íabÀ
 == 0 )

115 if–
timî_öfo
[ 
i
 ].
time_out
 > 0 )

117 
timî_öfo
[ 
i
 ].
time_out
--;

120 
	}
}

124 
Regi°îTimîISR
–(*
pU£rISR
)() )

126 
pFunU£rISR
 = 
pU£rISR
;

127 
	}
}

131 
	$Ba£TimîI¡îru±
()

133 
	`Upd©eTimî
();

136 if–
pFunU£rISR
 !
NULL
 )

138 
	`pFunU£rISR
();

140 
	}
}

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\timer\timer.h

1 #i‚de‡
__TIMER_H__


2 
	#__TIMER_H__


	)

4 
	~"timî_id.h
"

6 
	#DELAY_MS
(
x
)

	)

7 
	#SEC
–
x
 ) ( ( x ) * 1000UL )

	)

9 
InôTimî
( );

11 
SèπTimî
–
U8
 
id
, 
U32
 
time_out
 );

13 
DißbÀTimî
–
U8
 
id
 );

15 
St›Timî
–
U8
 
id
 );

17 
	#TIMER_EXPIRE
 0

	)

18 
	#TIMER_NOT_EXPIRE
 1

	)

19 
	#TIMER_DISABLE
 2

	)

20 
U8
 
IsExpúedTimî
–U8 
id
 );

24 
Regi°îTimîISR
–(*
pU£rISR
)() );

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\timer\timer_id.h

1 #i‚de‡
__TIMER_ID_H__


2 
	#__TIMER_ID_H__


	)

7 
	mTIMER_ID_COMM_MAIN_RX
,

8 
	mTIMER_ID_COMM_MAIN_TX
,

10 
	mTIMER_ID_COMM_KEY_RX
,

11 
	mTIMER_ID_COMM_KEY_TX
,

13 
	mTIMER_ID_COMM_WAIT_1
,

15 
	mTIMER_ID_1MS
,

16 
	mTIMER_ID_10MS
,

17 
	mTIMER_ID_100MS
,

19 
	mMAX_TIMER_ID_NUM


	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\util.c

1 
	~"mcu.h
"

2 
	~"utû.h
"

3 
	~"hw.h
"

5 
I16
 
	$GëMö
–
I16
 
x
, I16 
y
 )

7 if–
x
 > 
y
 )

9  
y
;

12  
x
;

13 
	}
}

15 
I16
 
	$GëMax
–
I16
 
x
, I16 
y
 )

17 if–
x
 > 
y
 )

19  
x
;

22  
y
;

23 
	}
}

26 
U8
 
	$Hex2Dec
(
U8
 
mu8Hex
)

28 
U8
 
mu8Dec
;

30 
mu8Dec
 = (
mu8Hex
 & 0x0F);

31 
mu8Dec
 +((
mu8Hex
 & 0xF0) >> 4) * 10;;

33  
mu8Dec
;

34 
	}
}

37 
U8
 
	$Dec2Hex
(
U8
 
mu8Dec
)

39 
U8
 
mu8Hex
;

41 
mu8Hex
 = 
mu8Dec
 % 10;

42 
mu8Hex
 +(
mu8Dec
 / 10) * 16;

44  
mu8Hex
;

45 
	}
}

47 
U8
 
	$C⁄vAsc2Byã
(
U8
 
mu8Uµî
, U8 
mu8Lowî
 )

49 
U8
 
mu8Temp
 = 0;

50 
U8
 
mu8VÆ
 = 0;

54 if–
mu8Uµî
 > '9' )

56 
mu8Temp
 = 
mu8Uµî
 - '7';

60 
mu8Temp
 = 
mu8Uµî
 - '0';

62 
mu8VÆ
 = 
mu8Temp
 * 16;

65 if–
mu8Lowî
 > '9' )

67 
mu8Temp
 = 
mu8Lowî
 - '7';

71 
mu8Temp
 = 
mu8Lowî
 - '0';

73 
mu8VÆ
 +
mu8Temp
;

76  
mu8VÆ
;

77 
	}
}

79 
	$Dñay_US
–
U8
 
us
 )

81  
us
-- )

83 
	`NOP
();

84 
	`NOP
();

85 
	`NOP
();

87 
	}
}

89 
U16
 
	$ByãOrdîC⁄v
–
U16
 
_§c
 )

91 
U16
 
h_to_l
 = 
_§c
 >> 8;

92 
U16
 
l_to_h
 = ( 
_§c
 & 0x00FF ) << 8;

94  ( 
l_to_h
 | 
h_to_l
 );

95 
	}
}

97 
	$Dñay_MS
–
U16
 
ms
 )

99 
U16
 
i
;

100 
U8
 
j
;

102  
i
 = 0 ; i < 
ms
 ; i++ )

104  
j
 = 0; j < 4 ; j++ )

106 
	`Dñay_US
( 250 );

107 
	`R_WDT_Re°¨t
();

110 
	}
}

112 
	$Re£t
()

118 
	}
}

	@D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\util.h

1 #i‚de‡
__UTIL_H__


2 
	#__UTIL_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	#GET_HIGH_BYTE
(
vÆ
Ë(
U8
)(((vÆ)&0xFF00Ë>> 8)

	)

7 
	#GET_LOW_BYTE
(
vÆ
Ë(
U8
)((vÆ)&0x00FF)

	)

8 
	#GET_UINT_WORD
(
lb
, 
hb
Ë((((
U16
)hb)<<8)|lb)

	)

10 
	#GET_32_BYTE_8
(
vÆ
Ë(
U8
)(((vÆ)&0x000000FF))

	)

11 
	#GET_32_BYTE_16
(
vÆ
Ë(
U8
)(((vÆ)&0x0000FF00)>>8)

	)

12 
	#GET_32_BYTE_24
(
vÆ
Ë(
U8
)(((vÆ)&0x00FF0000)>>16)

	)

13 
	#GET_32_BYTE_32
(
vÆ
Ë(
U8
)(((vÆ)&0xFF000000)>>24)

	)

14 
	#GET_UINT_WORD_32
(
b32
, 
b24
, 
b16
, 
b8
) \

16 –((
U32
)
b32
)<<24 ) |\

17 –((
U32
)
b24
)<<16 ) |\

18 –((
U32
)
b16
)<<8 ) |\

19 –(
U32
)
b8
) \

20 )

	)

22 
	#SET_BIT_BYTE
(
vÆ
,
bô
Ëdo{ vÆ |(
U8
)(bô); }0)

	)

23 
	#CLEAR_BIT_BYTE
(
vÆ
,
bô
Ëdo{ vÆ &(
U8
)(~bô); }0)

	)

25 
	#SET_BIT_WORD
(
vÆ
,
bô
Ëdo{ vÆ |(
U16
)(bô); }0)

	)

26 
	#CLEAR_BIT_WORD
(
vÆ
,
bô
Ëdo{ vÆ &(
U16
)(~bô); }0)

	)

28 
I16
 
GëMö
–I16 
x
, I16 );

29 
I16
 
GëMax
–I16 
x
, I16 
y
 );

31 
U8
 
Hex2Dec
(U8 
mu8Hex
);

32 
U8
 
Dec2Hex
(U8 
mu8Dec
);

34 
U8
 
C⁄vAsc2Byã
(U8 
mu8Uµî
, U8 
mu8Lowî
 );

35 
U16
 
ByãOrdîC⁄v
–U16 
_§c
 );

37 
Dñay_US
–
U8
 
us
 );

38 
Dñay_MS
–
U16
 
ms
 );

40 
Re£t
();

	@config.h

1 #i‚de‡
__CONFIG_H__


2 
	#__CONFIG_H__


	)

5 
	#CONFIG_DIMMING
 1

	)

7 
	#CONFIG_VOICE_NUVOTON
 1

8 

	)

9 
	#CONFIG_FOTA_LIB
 0

	)

	@prj_type.h

1 #i‚de‡
__PRJ_TYPE_H__


2 
	#__PRJ_TYPE_H__


	)

4 
	~"c⁄fig.h
"

5 
	~<°dio.h
>

6 
	~<°rög.h
>

9 
	tU8
;

10 sig√d 
	tI8
;

11 
	tU16
;

12 sig√d 
	tI16
;

13 
	tU32
;

14 sig√d 
	tI32
;

15 
	tF32
;

16 
	tBOOL_T
;

17 
	tTIME_T
;

19 
	tTEMP_T
;

22 
	#__DEBUG__
 1

	)

24 #i‡
__DEBUG__


25 
	#LOCAL


	)

27 
	#LOCAL
 

	)

30 #ifde‡
NULL


31 #unde‡
NULL


34 
	#NULL
 ((*)0)

	)

36 #ifde‡
TRUE


37 #unde‡
TRUE


40 
	#TRUE
 1

	)

42 #ifde‡
FALSE


43 #unde‡
FALSE


46 
	#FALSE
 0

	)

49 #ifde‡
ON


50 #unde‡
ON


53 
	#ON
 1

	)

55 #ifde‡
OFF


56 #unde‡
OFF


59 
	#OFF
 0

	)

61 
	#HIGH
 1

	)

62 
	#LOW
 0

	)

64 #i‡(
CONFIG_FOTA_LIB
 == 0)

65 
	#__FAR


	)

66 
	#SPRINTF
 
•rötf


	)

67 
	#MEMSET
 
mem£t


	)

68 
	#MEMCPY
 
mem˝y


	)

69 
	#MEMCMP
 
memcmp


	)

70 
	#ATOI
 
©oi


	)

72 
	#__FAR
 
__Ár


	)

73 
	#SPRINTF
 
•rötf_f


	)

74 
	#MEMSET
 
mem£t_f


	)

75 
	#MEMCPY
 
mem˝y_f


	)

76 
	#MEMCMP
 
memcmp_f


	)

77 
	#ATOI
 
©oi_f


	)

	@process_sys_event.h

1 #i‚de‡
__PROCESS_SYS_EVENT_H__


2 
	#__PROCESS_SYS_EVENT_H__


	)

4 
InôSy°em
();

6 
Pro˚ssEvítH™dÀr
();

	@queue.h

6 #i‚de‡
__QUEUE_H__


7 
	#__QUEUE_H__


	)

9 
	~"¥j_ty≥.h
"

12 
	s_queue_


14 **
	mmUd©a
;

15 
U16
 
	mmUqueueNum
;

16 
U8
 
	mmUd©aSize
;

18 
U16
 
	mmUª¨
;

19 
U16
 
	mmU‰⁄t
;

20 } 
	tSQueue_T
;

22 
InôQueue
(
SQueue_T
 *
xStQueue
, *
mUd©a
, 
U8
 
mUd©aSize
, U8 
mUqueueNum
 );

24 
U8
 
IsQueueEm±y
(
SQueue_T
 *
xStQueue
);

25 
U8
 
IsQueueFuŒ
(
SQueue_T
 *
xStQueue
);

27 
EnQueue
(
SQueue_T
 *
xStQueue
, *
xUd©a
);

28 
U8
 
DeQueue
(
SQueue_T
 *
xStQueue
, *
xU±rD©a
);

29 
U8
 
PìkQueue
(
SQueue_T
 *
xStQueue
, *
xU±rD©a
);

	@util.h

1 #i‚de‡
__UTIL_H__


2 
	#__UTIL_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	#GET_HIGH_BYTE
(
vÆ
Ë(
U8
)(((vÆ)&0xFF00Ë>> 8)

	)

7 
	#GET_LOW_BYTE
(
vÆ
Ë(
U8
)((vÆ)&0x00FF)

	)

8 
	#GET_UINT_WORD
(
lb
, 
hb
Ë((((
U16
)hb)<<8)|lb)

	)

10 
	#GET_32_BYTE_8
(
vÆ
Ë(
U8
)(((vÆ)&0x000000FF))

	)

11 
	#GET_32_BYTE_16
(
vÆ
Ë(
U8
)(((vÆ)&0x0000FF00)>>8)

	)

12 
	#GET_32_BYTE_24
(
vÆ
Ë(
U8
)(((vÆ)&0x00FF0000)>>16)

	)

13 
	#GET_32_BYTE_32
(
vÆ
Ë(
U8
)(((vÆ)&0xFF000000)>>24)

	)

14 
	#GET_UINT_WORD_32
(
b32
, 
b24
, 
b16
, 
b8
) \

16 –((
U32
)
b32
)<<24 ) |\

17 –((
U32
)
b24
)<<16 ) |\

18 –((
U32
)
b16
)<<8 ) |\

19 –(
U32
)
b8
) \

20 )

	)

22 
	#SET_BIT_BYTE
(
vÆ
,
bô
Ëdo{ vÆ |(
U8
)(bô); }0)

	)

23 
	#CLEAR_BIT_BYTE
(
vÆ
,
bô
Ëdo{ vÆ &(
U8
)(~bô); }0)

	)

25 
	#SET_BIT_WORD
(
vÆ
,
bô
Ëdo{ vÆ |(
U16
)(bô); }0)

	)

26 
	#CLEAR_BIT_WORD
(
vÆ
,
bô
Ëdo{ vÆ &(
U16
)(~bô); }0)

	)

28 
I16
 
GëMö
–I16 
x
, I16 );

29 
I16
 
GëMax
–I16 
x
, I16 
y
 );

31 
U8
 
Hex2Dec
(U8 
mu8Hex
);

32 
U8
 
Dec2Hex
(U8 
mu8Dec
);

34 
U8
 
C⁄vAsc2Byã
(U8 
mu8Uµî
, U8 
mu8Lowî
 );

35 
U16
 
ByãOrdîC⁄v
–U16 
_§c
 );

37 
Dñay_US
–
U8
 
us
 );

38 
Dñay_MS
–
U16
 
ms
 );

40 
Re£t
();

	@
1
.
0
37
2578
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\comm.c
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\comm.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\comm_queue.c
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\comm_queue.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\crc16.c
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\crc16.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\parser.c
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\parser.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\parser_main.c
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\comm\parser_main.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\config.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hal_key.c
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hal_key.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hal_led.c
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hal_led.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hal_led_onoff.c
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hal_led_onoff.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hal_serial.c
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hal_serial.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\hw.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\hal\mcu.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\main.c
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\prj_type.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\process_sys_event.c
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\process_sys_event.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\queue.c
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\queue.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\timer\timer.c
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\timer\timer.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\timer\timer_id.h
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\util.c
D:\Work\project_svn\2024\TECH_TRUE_BUILT_IN\Program\Front\Source\util.h
config.h
prj_type.h
process_sys_event.h
queue.h
util.h
